{"version":3,"file":"static/js/383.a986740b.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@ethersproject+providers@5.7.2/node_modules/@ethersproject/providers/src.ts/browser-ws.ts","../node_modules/.pnpm/@ethersproject+providers@5.7.2/node_modules/@ethersproject/providers/src.ts/websocket-provider.ts","../node_modules/.pnpm/alchemy-sdk@3.1.2/node_modules/alchemy-sdk/src/internal/websocket-backfiller.ts","../node_modules/.pnpm/alchemy-sdk@3.1.2/node_modules/alchemy-sdk/src/api/alchemy-websocket-provider.ts","../node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/global.js","../node_modules/.pnpm/sturdy-websocket@0.2.1/node_modules/sturdy-websocket/src/index.ts","../node_modules/.pnpm/websocket@1.0.34/node_modules/websocket/lib/browser.js","../node_modules/.pnpm/websocket@1.0.34/node_modules/websocket/lib/version.js"],"sourcesContent":["\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nlet WS: any = null;\n\ntry {\n    WS = (WebSocket as any);\n    if (WS == null) { throw new Error(\"inject please\"); }\n} catch (error) {\n    const logger = new Logger(version);\n    WS = function() {\n        logger.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    }\n}\n//export default WS;\n//module.exports = WS;\nexport { WS as WebSocket };\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\nexport interface WebSocketLike {\n    onopen: ((...args: Array<any>) => any) | null;\n    onmessage: ((...args: Array<any>) => any) | null;\n    onerror: ((...args: Array<any>) => any) | null;\n\n    readyState: number;\n\n    send(payload: any): void;\n    close(code?: number, reason?: string): void;\n}\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string | WebSocketLike, network?: Networkish) {\n\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        if (typeof(url) === \"string\") {\n            super(url, network);\n        } else {\n            super(\"_websocket\", network);\n        }\n\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        } else {\n            defineReadOnly(this, \"_websocket\", url);\n        }\n\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this.websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket(): WebSocketLike { return this._websocket; }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this.websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this.websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this.websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this.websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this.websocket.close(1000);\n    }\n}\n","import { AlchemyWebSocketProvider } from '../api/alchemy-websocket-provider';\nimport { fromHex, toHex } from '../api/util';\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport interface NewHeadsEvent {\n  author: string;\n  difficulty: string;\n  extraData: string;\n  gasLimit: string;\n  gasUsed: string;\n  hash: string;\n  logsBloom: string;\n  miner: string;\n  mixHash: string;\n  nonce: string;\n  number: string;\n  parentHash: string;\n  receiptsRoot: string;\n  sealFields: string[];\n  sha3Uncles: string;\n  size: string;\n  stateRoot: string;\n  timestamp: string;\n  transactionsRoot: string;\n}\n\n/** The return type of eth_getBlocksByHash. */\nexport interface BlockHead extends NewHeadsEvent {\n  totalDifficulty: string;\n  transactions: any[];\n  uncles: string[];\n}\n\nexport interface LogsEvent {\n  address: string;\n  blockHash: string;\n  blockNumber: string;\n  data: string;\n  logIndex: string;\n  topics: string[];\n  transactionHash: string;\n  transactionIndex: string;\n  removed?: boolean;\n}\n\nexport interface LogsSubscriptionFilter {\n  address?: string | string[];\n  topics?: Array<string | string[] | null>;\n}\n\nexport interface GetLogsOptions extends LogsSubscriptionFilter {\n  fromBlock?: string;\n  toBlock?: string;\n}\n\ninterface CommonAncestor {\n  blockNumber: number;\n  logIndex: number;\n}\n\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed for a week.\n */\nconst MAX_BACKFILL_BLOCKS = 120;\n\n/**\n * The WebsocketBackfiller fetches events that were sent since a provided block\n * number. This is used in the {@link AlchemyWebSocketProvider} to backfill\n * events that were transmitted while the websocket connection was down.\n *\n * The backfiller backfills two main eth_subscribe events: `logs` and `newHeads`.\n *\n * @internal\n */\nexport class WebsocketBackfiller {\n  // TODO: Use HTTP provider to do backfill.\n  private maxBackfillBlocks = MAX_BACKFILL_BLOCKS;\n  constructor(private readonly provider: AlchemyWebSocketProvider) {}\n\n  /**\n   * Runs backfill for `newHeads` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param previousHeads Previous head requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   * @returns A list of `newHeads` events that were sent since the last backfill.\n   */\n  async getNewHeadsBackfill(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n    fromBlockNumber: number\n  ): Promise<NewHeadsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous heads to fetch, return new heads since\n    // `fromBlockNumber`, or up to maxBackfillBlocks from the current head.\n    if (previousHeads.length === 0) {\n      return this.getHeadEventsInRange(\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted event is too far back in the past, there's no need\n    // to backfill for reorgs. Just fetch the last `maxBackfillBlocks` worth of\n    // new heads.\n    const lastSeenBlockNumber = fromHex(\n      previousHeads[previousHeads.length - 1].number\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber <= minBlockNumber) {\n      return this.getHeadEventsInRange(minBlockNumber, toBlockNumber + 1);\n    }\n\n    // To capture all `newHeads` events, return all head events from the last\n    // seen block number to current + any of the previous heads that were re-orged.\n    const reorgHeads: NewHeadsEvent[] = await this.getReorgHeads(\n      isCancelled,\n      previousHeads\n    );\n    throwIfCancelled(isCancelled);\n    const intermediateHeads: NewHeadsEvent[] = await this.getHeadEventsInRange(\n      lastSeenBlockNumber + 1,\n      toBlockNumber + 1\n    );\n    throwIfCancelled(isCancelled);\n    return [...reorgHeads, ...intermediateHeads];\n  }\n\n  /**\n   * Runs backfill for `logs` events.\n   *\n   * @param isCancelled Whether the backfill request is cancelled.\n   * @param filter The filter object that accompanies a logs subscription.\n   * @param previousLogs Previous log requests that were sent.\n   * @param fromBlockNumber The block number to start backfilling from.\n   */\n  async getLogsBackfill(\n    isCancelled: () => boolean,\n    filter: LogsSubscriptionFilter,\n    previousLogs: LogsEvent[],\n    fromBlockNumber: number\n  ): Promise<LogsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await this.getBlockNumber();\n    throwIfCancelled(isCancelled);\n\n    // If there are no previous logs to fetch, return new logs since\n    // `fromBlockNumber`, or up to `maxBackfillBlocks` from the current head.\n    if (previousLogs.length === 0) {\n      return this.getLogsInRange(\n        filter,\n        Math.max(fromBlockNumber, toBlockNumber - this.maxBackfillBlocks) + 1,\n        toBlockNumber + 1\n      );\n    }\n\n    // If the last emitted log is too far back in the past, there's no need\n    // to backfill for removed logs. Just fetch the last `maxBackfillBlocks`\n    // worth of logs.\n    const lastSeenBlockNumber = fromHex(\n      previousLogs[previousLogs.length - 1].blockNumber\n    );\n    const minBlockNumber = toBlockNumber - this.maxBackfillBlocks + 1;\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return this.getLogsInRange(filter, minBlockNumber, toBlockNumber + 1);\n    }\n\n    // Return all log events that have happened along with log events that have\n    // been removed due to a chain reorg.\n    const commonAncestor = await this.getCommonAncestor(\n      isCancelled,\n      previousLogs\n    );\n    throwIfCancelled(isCancelled);\n\n    // All previous logs with a block number greater than the common ancestor\n    // were part of a re-org, so mark them as such.\n    const removedLogs = previousLogs\n      .filter(log => fromHex(log.blockNumber) > commonAncestor.blockNumber)\n      .map(log => ({ ...log, removed: true }));\n\n    // If no common ancestor was found, start backfill from the oldest log's\n    // block number.\n    const fromBlockInclusive =\n      commonAncestor.blockNumber === Number.NEGATIVE_INFINITY\n        ? fromHex(previousLogs[0].blockNumber)\n        : commonAncestor.blockNumber;\n    let addedLogs = await this.getLogsInRange(\n      filter,\n      fromBlockInclusive,\n      toBlockNumber + 1\n    );\n\n    // De-dupe any logs that were already emitted.\n    addedLogs = addedLogs.filter(\n      log =>\n        log &&\n        (fromHex(log.blockNumber) > commonAncestor.blockNumber ||\n          fromHex(log.logIndex) > commonAncestor.logIndex)\n    );\n\n    throwIfCancelled(isCancelled);\n    return [...removedLogs, ...addedLogs];\n  }\n\n  /**\n   * Sets a new max backfill blocks. VISIBLE ONLY FOR TESTING.\n   *\n   * @internal\n   */\n  setMaxBackfillBlock(newMax: number): void {\n    this.maxBackfillBlocks = newMax;\n  }\n\n  /**\n   * Gets the current block number as a number.\n   *\n   * @private\n   */\n  private async getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await this.provider.send('eth_blockNumber');\n    return fromHex(blockNumberHex);\n  }\n\n  /**\n   * Gets all `newHead` events in the provided range. Note that the returned\n   * heads do not include re-orged heads. Use {@link getReorgHeads} to find heads\n   * that were part of a re-org.\n   *\n   * @private\n   */\n  private async getHeadEventsInRange(\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<NewHeadsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const batchParts: BatchPart[] = [];\n    for (let i = fromBlockInclusive; i < toBlockExclusive; i++) {\n      batchParts.push({\n        method: 'eth_getBlockByNumber',\n        params: [toHex(i), false]\n      });\n    }\n\n    // TODO: handle errors\n    const blockHeads = await this.provider.sendBatch(batchParts);\n    return blockHeads.map(toNewHeadsEvent);\n  }\n\n  /**\n   * Returns all heads that were part of a reorg event.\n   *\n   * @private\n   */\n  private async getReorgHeads(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[]\n  ): Promise<NewHeadsEvent[]> {\n    const result: NewHeadsEvent[] = [];\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    for (let i = previousHeads.length - 1; i >= 0; i--) {\n      const oldEvent = previousHeads[i];\n      const blockHead = await this.getBlockByNumber(fromHex(oldEvent.number));\n      throwIfCancelled(isCancelled);\n\n      // If the hashes match, then current head in the iteration was not re-orged.\n      if (oldEvent.hash === blockHead.hash) {\n        break;\n      }\n\n      result.push(toNewHeadsEvent(blockHead));\n    }\n    return result.reverse();\n  }\n\n  /**\n   * Simple wrapper around `eth_getBlockByNumber` that returns the complete\n   * block information for the provided block number.\n   *\n   * @private\n   */\n  private async getBlockByNumber(blockNumber: number): Promise<BlockHead> {\n    return this.provider.send('eth_getBlockByNumber', [\n      toHex(blockNumber),\n      false\n    ]);\n  }\n\n  /**\n   * Given a list of previous log events, finds the common block number from the\n   * logs that matches the block head.\n   *\n   * This can be used to identify which logs are part of a re-org.\n   *\n   * Returns 1 less than the oldest log's block number if no common ancestor was found.\n   *\n   * @private\n   */\n  private async getCommonAncestor(\n    isCancelled: () => boolean,\n    previousLogs: LogsEvent[]\n  ): Promise<CommonAncestor> {\n    // Iterate from the most recent head backwards in order to find the first\n    // block that was part of a re-org.\n    let blockHead = await this.getBlockByNumber(\n      fromHex(previousLogs[previousLogs.length - 1].blockNumber)\n    );\n    throwIfCancelled(isCancelled);\n    for (let i = previousLogs.length - 1; i >= 0; i--) {\n      const oldLog = previousLogs[i];\n\n      // Ensure that updated blocks are fetched every time the log's block number\n      // changes.\n      if (oldLog.blockNumber !== blockHead.number) {\n        blockHead = await this.getBlockByNumber(fromHex(oldLog.blockNumber));\n      }\n\n      // Since logs are ordered in ascending order, the first log that matches\n      // the hash should be the largest logIndex.\n      if (oldLog.blockHash === blockHead.hash) {\n        return {\n          blockNumber: fromHex(oldLog.blockNumber),\n          logIndex: fromHex(oldLog.logIndex)\n        };\n      }\n    }\n    return {\n      blockNumber: Number.NEGATIVE_INFINITY,\n      logIndex: Number.NEGATIVE_INFINITY\n    };\n  }\n\n  /**\n   * Gets all `logs` events in the provided range. Note that the returned logs\n   * do not include removed logs.\n   *\n   * @private\n   */ private async getLogsInRange(\n    filter: LogsSubscriptionFilter,\n    fromBlockInclusive: number,\n    toBlockExclusive: number\n  ): Promise<LogsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const rangeFilter: GetLogsOptions = {\n      ...filter,\n      fromBlock: toHex(fromBlockInclusive),\n      toBlock: toHex(toBlockExclusive - 1)\n    };\n    return this.provider.send('eth_getLogs', [rangeFilter]);\n  }\n}\n\nfunction toNewHeadsEvent(head: BlockHead): NewHeadsEvent {\n  const result: NewHeadsEvent & Partial<BlockHead> = { ...head };\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events: NewHeadsEvent[]): NewHeadsEvent[] {\n  return dedupe(events, event => event.hash);\n}\n\nexport function dedupeLogs(events: LogsEvent[]): LogsEvent[] {\n  return dedupe(events, event => `${event.blockHash}/${event.logIndex}`);\n}\n\nfunction dedupe<T>(items: T[], getKey: (item: T) => any): T[] {\n  const keysSeen: Set<any> = new Set();\n  const result: T[] = [];\n  items.forEach(item => {\n    const key = getKey(item);\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}\n\nconst CANCELLED = new Error('Cancelled');\nexport function throwIfCancelled(isCancelled: () => boolean): void {\n  if (isCancelled()) {\n    throw CANCELLED;\n  }\n}\n","import SturdyWebSocket from 'sturdy-websocket';\n\nimport { Listener } from '@ethersproject/abstract-provider';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport {\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { Network as NetworkFromEthers } from '@ethersproject/networks/lib/types';\nimport {\n  CommunityResourcable,\n  WebSocketProvider\n} from '@ethersproject/providers';\n\nimport {\n  EthersEvent,\n  getAlchemyEventTag,\n  isAlchemyEvent,\n  verifyAlchemyEventName\n} from '../internal/ethers-event';\nimport {\n  ALCHEMY_EVENT_TYPES,\n  ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE,\n  ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SingleOrBatchResponse,\n  SubscriptionEvent,\n  WebSocketMessage\n} from '../internal/internal-types';\nimport {\n  BatchPart,\n  LogsEvent,\n  LogsSubscriptionFilter,\n  NewHeadsEvent,\n  WebsocketBackfiller,\n  dedupeLogs,\n  dedupeNewHeads,\n  throwIfCancelled\n} from '../internal/websocket-backfiller';\nimport { AlchemyEventType, AlchemySubscription } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  EthersNetwork,\n  noop\n} from '../util/const';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\nimport { AlchemyProvider } from './alchemy-provider';\nimport { fromHex } from './util';\n\nconst HEARTBEAT_INTERVAL = 30000;\nconst HEARTBEAT_WAIT_TIME = 10000;\nconst BACKFILL_TIMEOUT = 60000;\nconst BACKFILL_RETRIES = 5;\n/**\n * Subscriptions have a memory of recent events they have sent so that in the\n * event that they disconnect and need to backfill, they can detect re-orgs.\n * Keep a buffer that goes back at least these many blocks, the maximum amount\n * at which we might conceivably see a re-org.\n *\n * Note that while our buffer goes back this many blocks, it may contain more\n * than this many elements, since in the case of logs subscriptions more than\n * one event may be emitted for a block.\n */\nconst RETAINED_EVENT_BLOCK_COUNT = 10;\n\n/**\n * SDK's custom implementation fo the ethers.js's 'AlchemyWebSocketProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getWebSocketProvider()}.\n *\n * @public\n */\nexport class AlchemyWebSocketProvider\n  extends WebSocketProvider\n  implements CommunityResourcable\n{\n  _events: Array<EthersEvent> = [];\n  readonly apiKey: string;\n\n  // In the case of a WebSocket reconnection, all subscriptions are lost and we\n  // create new ones to replace them, but we want to create the illusion that\n  // the original subscriptions persist. Thus, maintain a mapping from the\n  // \"virtual\" subscription ids which are visible to the consumer to the\n  // \"physical\" subscription ids of the actual connections. This terminology is\n  // borrowed from virtual and physical memory, which has a similar mapping.\n  /** @internal */\n  private readonly virtualSubscriptionsById: Map<string, VirtualSubscription> =\n    new Map();\n  /** @internal */\n  private readonly virtualIdsByPhysicalId: Map<string, string> = new Map();\n  /** @internal */\n  private readonly backfiller: WebsocketBackfiller;\n  /** @internal */\n  private heartbeatIntervalId?: NodeJS.Timeout;\n  /** @internal */\n  private cancelBackfill: () => void;\n\n  /** @internal */\n  constructor(config: AlchemyConfig, wsConstructor?: any) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'wss'\n    );\n\n    const protocol = `alchemy-sdk-${VERSION}`;\n\n    // Use the provided config URL override if it exists, otherwise use the created one.\n    const ws = new SturdyWebSocket(config.url ?? connection.url, protocol, {\n      wsConstructor: wsConstructor ?? getWebsocketConstructor()\n    });\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(ws as any, ethersNetwork);\n    this.apiKey = apiKey;\n\n    // Start heartbeat and backfiller for the websocket connection.\n    this.backfiller = new WebsocketBackfiller(this);\n    this.addSocketListeners();\n    this.startHeartbeat();\n    this.cancelBackfill = noop;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based subscriptions.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  on(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  /**\n   * Overridden implementation of ethers that includes Alchemy based\n   * subscriptions. Adds a listener to the triggered for only the next\n   * {@link eventName} event, after which it will be removed.\n   *\n   * @param eventName Event to subscribe to\n   * @param listener The listener function to call when the event is triggered.\n   * @override\n   * @public\n   */\n  // TODO: Override `Listener` type to get type autocompletions.\n  once(eventName: AlchemyEventType, listener: Listener): this {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  /**\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\n   * listener is provided, all listeners for the event will be removed.\n   *\n   * @param eventName Event to unlisten to.\n   * @param listener The listener function to remove.\n   * @override\n   * @public\n   */\n  off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (isAlchemyEvent(eventName)) {\n      return this._off(eventName, listener);\n    } else {\n      return super.off(eventName, listener);\n    }\n  }\n\n  /**\n   * Remove all listeners for the provided {@link eventName} event. If no event\n   * is provided, all events and their listeners are removed.\n   *\n   * @param eventName The event to remove all listeners for.\n   * @override\n   * @public\n   */\n  removeAllListeners(eventName?: AlchemyEventType): this {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._removeAllListeners(eventName);\n    } else {\n      return super.removeAllListeners(eventName);\n    }\n  }\n\n  /**\n   * Returns the number of listeners for the provided {@link eventName} event. If\n   * no event is provided, the total number of listeners for all events is returned.\n   *\n   * @param eventName The event to get the number of listeners for.\n   * @public\n   * @override\n   */\n  listenerCount(eventName?: AlchemyEventType): number {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listenerCount(eventName);\n    } else {\n      return super.listenerCount(eventName);\n    }\n  }\n\n  /**\n   * Returns an array of listeners for the provided {@link eventName} event. If\n   * no event is provided, all listeners will be included.\n   *\n   * @param eventName The event to get the listeners for.\n   * @public\n   * @override\n   */\n  listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName !== undefined && isAlchemyEvent(eventName)) {\n      return this._listeners(eventName);\n    } else {\n      return super.listeners(eventName);\n    }\n  }\n\n  /**\n   * Overrides the method in `BaseProvider` in order to properly format the\n   * Alchemy subscription events.\n   *\n   * @internal\n   * @override\n   */\n  _addEventListener(\n    eventName: AlchemyEventType,\n    listener: Listener,\n    once: boolean\n  ): this {\n    if (isAlchemyEvent(eventName)) {\n      verifyAlchemyEventName(eventName);\n      const event = new EthersEvent(\n        getAlchemyEventTag(eventName),\n        listener,\n        once\n      );\n      this._events.push(event);\n      this._startEvent(event);\n      return this;\n    } else {\n      return super._addEventListener(eventName, listener, once);\n    }\n  }\n\n  /**\n   * Overrides the `_startEvent()` method in ethers.js's\n   * {@link WebSocketProvider} to include additional alchemy methods.\n   *\n   * @param event\n   * @override\n   * @internal\n   */\n  _startEvent(event: EthersEvent): void {\n    // Check if the event type is a custom Alchemy subscription.\n    const customLogicTypes = [...ALCHEMY_EVENT_TYPES, 'block', 'filter'];\n    if (customLogicTypes.includes(event.type)) {\n      this.customStartEvent(event);\n    } else {\n      super._startEvent(event);\n    }\n  }\n\n  /**\n   * Overridden from ethers.js's {@link WebSocketProvider}\n   *\n   * Modified in order to add mappings for backfilling.\n   *\n   * @internal\n   * @override\n   */\n  async _subscribe(\n    tag: string,\n    param: Array<any>,\n    processFunc: (result: any) => void,\n    event?: EthersEvent\n  ): Promise<void> {\n    let subIdPromise = this._subIds[tag];\n\n    // BEGIN MODIFIED CODE\n    const startingBlockNumber = await this.getBlockNumber();\n    // END MODIFIED CODE\n\n    if (subIdPromise == null) {\n      subIdPromise = Promise.all(param).then(param => {\n        return this.send('eth_subscribe', param);\n      });\n      this._subIds[tag] = subIdPromise;\n    }\n    const subId = await subIdPromise;\n\n    // BEGIN MODIFIED CODE\n    const resolvedParams = await Promise.all(param);\n    this.virtualSubscriptionsById.set(subId, {\n      event: event!,\n      method: 'eth_subscribe',\n      params: resolvedParams,\n      startingBlockNumber,\n      virtualId: subId,\n      physicalId: subId,\n      sentEvents: [],\n      isBackfilling: false,\n      backfillBuffer: []\n    });\n    this.virtualIdsByPhysicalId.set(subId, subId);\n\n    // END MODIFIED CODE\n\n    this._subs[subId] = { tag, processFunc };\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @internal\n   * @override\n   */\n  emit(eventName: AlchemyEventType, ...args: Array<any>): boolean {\n    if (isAlchemyEvent(eventName)) {\n      let result = false;\n\n      const stopped: Array<EthersEvent> = [];\n\n      // This line is the only modified line from the original method.\n      const eventTag = getAlchemyEventTag(eventName);\n\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        setTimeout(() => {\n          event.listener.apply(this, args);\n        }, 0);\n\n        result = true;\n\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n\n        return true;\n      });\n\n      stopped.forEach(event => {\n        this._stopEvent(event);\n      });\n\n      return result;\n    } else {\n      return super.emit(eventName, ...args);\n    }\n  }\n\n  /** @internal */\n  async sendBatch(parts: BatchPart[]): Promise<any[]> {\n    let nextId = 0;\n    const payload: JsonRpcRequest[] = parts.map(({ method, params }) => {\n      return {\n        method,\n        params,\n        jsonrpc: '2.0',\n        id: `alchemy-sdk:${nextId++}`\n      };\n    });\n\n    return this.sendBatchConcurrently(payload);\n  }\n\n  /** @override */\n  destroy(): Promise<void> {\n    this.removeSocketListeners();\n    this.stopHeartbeatAndBackfill();\n    return super.destroy();\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `WebSocketProvider._stopEvent()`.\n   *\n   * This method is copied over directly in order to support Alchemy's\n   * subscription type by allowing the provider to properly stop Alchemy's\n   * subscription events.\n   *\n   * @internal\n   */\n  _stopEvent(event: EthersEvent): void {\n    let tag = event.tag;\n\n    // START MODIFIED CODE\n    if (ALCHEMY_EVENT_TYPES.includes(event.type)) {\n      // There are remaining pending transaction listeners.\n      if (\n        this._events.filter(e => ALCHEMY_EVENT_TYPES.includes(e.type)).length\n      ) {\n        return;\n      }\n      // END MODIFIED CODE\n    } else if (event.type === 'tx') {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === 'tx').length) {\n        return;\n      }\n      tag = 'tx';\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n\n    const subId = this._subIds[tag];\n    if (!subId) {\n      return;\n    }\n\n    delete this._subIds[tag];\n    void subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n      delete this._subs[subId];\n      void this.send('eth_unsubscribe', [subId]);\n    });\n  }\n\n  /** @internal */\n  private addSocketListeners(): void {\n    this._websocket.addEventListener('message', this.handleMessage);\n    this._websocket.addEventListener('reopen', this.handleReopen);\n    this._websocket.addEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /** @internal */\n  private removeSocketListeners(): void {\n    this._websocket.removeEventListener('message', this.handleMessage);\n    this._websocket.removeEventListener('reopen', this.handleReopen);\n    this._websocket.removeEventListener('down', this.stopHeartbeatAndBackfill);\n  }\n\n  /**\n   * The underlying ethers {@link WebSocketProvider} already handles and emits\n   * messages. To allow backfilling, track all messages that are emitted.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleMessage = (event: MessageEvent): void => {\n    const message: WebSocketMessage = JSON.parse(event.data);\n    if (!isSubscriptionEvent(message)) {\n      return;\n    }\n    const physicalId = message.params.subscription;\n    const virtualId = this.virtualIdsByPhysicalId.get(physicalId);\n    if (!virtualId) {\n      return;\n    }\n    const subscription = this.virtualSubscriptionsById.get(virtualId)!;\n    if (subscription.method !== 'eth_subscribe') {\n      return;\n    }\n\n    switch (subscription.params[0]) {\n      case 'newHeads': {\n        const newHeadsSubscription = subscription as NewHeadsSubscription;\n        const newHeadsMessage = message as SubscriptionEvent<NewHeadsEvent>;\n        const { isBackfilling, backfillBuffer } = newHeadsSubscription;\n        const { result } = newHeadsMessage.params;\n        if (isBackfilling) {\n          addToNewHeadsEventsBuffer(backfillBuffer, result);\n        } else if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        } else {\n          // Ethers subscription mapping will emit the event, just store it.\n          this.rememberEvent(virtualId, result, getNewHeadsBlockNumber);\n        }\n        break;\n      }\n      case 'logs': {\n        const logsSubscription = subscription as LogsSubscription;\n        const logsMessage = message as SubscriptionEvent<LogsEvent>;\n        const { isBackfilling, backfillBuffer } = logsSubscription;\n        const { result } = logsMessage.params;\n        if (isBackfilling) {\n          addToLogsEventsBuffer(backfillBuffer, result);\n        } else if (virtualId !== physicalId) {\n          this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n        } else {\n          this.rememberEvent(virtualId, result, getLogsBlockNumber);\n        }\n        break;\n      }\n      default:\n        if (physicalId !== virtualId) {\n          // In the case of a re-opened subscription, ethers will not emit the\n          // event, so the SDK has to.\n          const { result } = (message as SubscriptionEvent<unknown>).params;\n          this.emitEvent(virtualId, result);\n        }\n    }\n  };\n\n  /**\n   * When the websocket connection reopens:\n   *\n   * 1. Resubscribe to all existing subscriptions and start backfilling\n   * 2. Restart heart beat.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private handleReopen = () => {\n    this.virtualIdsByPhysicalId.clear();\n    const { cancel, isCancelled } = makeCancelToken();\n    this.cancelBackfill = cancel;\n    for (const subscription of this.virtualSubscriptionsById.values()) {\n      void (async () => {\n        try {\n          await this.resubscribeAndBackfill(isCancelled, subscription);\n        } catch (error) {\n          if (!isCancelled()) {\n            console.error(\n              `Error while backfilling \"${subscription.params[0]}\" subscription. Some events may be missing.`,\n              error\n            );\n          }\n        }\n      })();\n    }\n    this.startHeartbeat();\n  };\n\n  /**\n   * Reopens the backfill based on\n   *\n   * @param isCancelled\n   * @param subscription\n   * @internal\n   */\n  private async resubscribeAndBackfill(\n    isCancelled: () => boolean,\n    subscription: VirtualSubscription\n  ): Promise<void> {\n    const {\n      virtualId,\n      method,\n      params,\n      sentEvents,\n      backfillBuffer,\n      startingBlockNumber\n    } = subscription;\n    subscription.isBackfilling = true;\n    backfillBuffer.length = 0;\n    try {\n      const physicalId = await this.send(method, params);\n      throwIfCancelled(isCancelled);\n      subscription.physicalId = physicalId;\n      this.virtualIdsByPhysicalId.set(physicalId, virtualId);\n      switch (params[0]) {\n        case 'newHeads': {\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getNewHeadsBackfill(\n                  isCancelled,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeNewHeads([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitNewHeadsEvent(virtualId, event));\n          break;\n        }\n        case 'logs': {\n          const filter: LogsSubscriptionFilter = params[1] || {};\n          const backfillEvents = await withBackoffRetries(\n            () =>\n              withTimeout(\n                this.backfiller.getLogsBackfill(\n                  isCancelled,\n                  filter,\n                  sentEvents,\n                  startingBlockNumber\n                ),\n                BACKFILL_TIMEOUT\n              ),\n            BACKFILL_RETRIES,\n            () => !isCancelled()\n          );\n          throwIfCancelled(isCancelled);\n          const events = dedupeLogs([...backfillEvents, ...backfillBuffer]);\n          events.forEach(event => this.emitLogsEvent(virtualId, event));\n          break;\n        }\n        default:\n          break;\n      }\n    } finally {\n      subscription.isBackfilling = false;\n      backfillBuffer.length = 0;\n    }\n  }\n\n  /**\n   * Cancels the heartbeat and any pending backfills being performed. This is\n   * called when the websocket connection goes down or is disconnected.\n   *\n   * This is a field arrow function in order to preserve `this` context when\n   * passing the method as an event listener.\n   *\n   * @internal\n   */\n  private stopHeartbeatAndBackfill = () => {\n    if (this.heartbeatIntervalId != null) {\n      clearInterval(this.heartbeatIntervalId);\n      this.heartbeatIntervalId = undefined;\n    }\n    this.cancelBackfill();\n  };\n\n  /** @internal */\n  private emitNewHeadsEvent(virtualId: string, result: NewHeadsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);\n  }\n\n  /** @internal */\n  private emitLogsEvent(virtualId: string, result: LogsEvent): void {\n    this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);\n  }\n\n  /**\n   * Emits an event to consumers, but also remembers it in its subscriptions's\n   * `sentEvents` buffer so that we can detect re-orgs if the connection drops\n   * and needs to be reconnected.\n   *\n   * @internal\n   */\n  private emitAndRememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    this.rememberEvent(virtualId, result, getBlockNumber);\n    this.emitEvent(virtualId, result);\n  }\n\n  private emitEvent<T>(virtualId: string, result: T): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    this.emitGenericEvent(subscription, result);\n  }\n\n  /** @internal */\n  private rememberEvent<T>(\n    virtualId: string,\n    result: T,\n    getBlockNumber: (result: T) => number\n  ): void {\n    const subscription = this.virtualSubscriptionsById.get(virtualId);\n    if (!subscription) {\n      return;\n    }\n    // Web3 modifies these event objects once we pass them on (changing hex\n    // numbers to numbers). We want the original event, so make a defensive\n    // copy.\n    addToPastEventsBuffer(\n      subscription.sentEvents,\n      { ...result },\n      getBlockNumber\n    );\n  }\n\n  /** @internal */\n  private emitGenericEvent(\n    subscription: VirtualSubscription,\n    result: any\n  ): void {\n    const emitFunction = this.emitProcessFn(subscription.event);\n    emitFunction(result);\n  }\n\n  /**\n   * Starts a heartbeat that pings the websocket server periodically to ensure\n   * that the connection stays open.\n   *\n   * @internal\n   */\n  private startHeartbeat(): void {\n    if (this.heartbeatIntervalId != null) {\n      return;\n    }\n    this.heartbeatIntervalId = setInterval(async () => {\n      try {\n        await withTimeout(this.send('net_version'), HEARTBEAT_WAIT_TIME);\n      } catch {\n        this._websocket.reconnect();\n      }\n    }, HEARTBEAT_INTERVAL);\n  }\n\n  /**\n   * This method sends the batch concurrently as individual requests rather than\n   * as a batch, which was the original implementation. The original batch logic\n   * is preserved in this implementation in order for faster porting.\n   *\n   * @param payload\n   * @internal\n   */\n  // TODO(cleanup): Refactor and remove usages of `sendBatch()`.\n  // TODO(errors): Use allSettled() once we have more error handling.\n  private async sendBatchConcurrently(\n    payload: JsonRpcRequest[]\n  ): Promise<unknown[]> {\n    return Promise.all(payload.map(req => this.send(req.method, req.params)));\n  }\n\n  /** @internal */\n  private customStartEvent(event: EthersEvent): void {\n    if (event.type === ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE) {\n      const { fromAddress, toAddress, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.PENDING_TRANSACTIONS,\n          { fromAddress, toAddress, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE) {\n      const { addresses, includeRemoved, hashesOnly } = event;\n      void this._subscribe(\n        event.tag,\n        [\n          AlchemySubscription.MINED_TRANSACTIONS,\n          { addresses, includeRemoved, hashesOnly }\n        ],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'block') {\n      void this._subscribe(\n        'block',\n        ['newHeads'],\n        this.emitProcessFn(event),\n        event\n      );\n    } else if (event.type === 'filter') {\n      void this._subscribe(\n        event.tag,\n        ['logs', this._getFilter(event.filter)],\n        this.emitProcessFn(event),\n        event\n      );\n    }\n  }\n\n  /** @internal */\n  private emitProcessFn(event: EthersEvent): (result: any) => void {\n    switch (event.type) {\n      case ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.PENDING_TRANSACTIONS,\n              fromAddress: event.fromAddress,\n              toAddress: event.toAddress,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE:\n        return result =>\n          this.emit(\n            {\n              method: AlchemySubscription.MINED_TRANSACTIONS,\n              addresses: event.addresses,\n              includeRemoved: event.includeRemoved,\n              hashesOnly: event.hashesOnly\n            },\n            result\n          );\n      case 'block':\n        return result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit('block', blockNumber);\n        };\n      case 'filter':\n        return result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n          this.emit(event.filter, this.formatter.filterLog(result));\n        };\n      default:\n        throw new Error('Invalid event type to `emitProcessFn()`');\n    }\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.off()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _off(eventName: AlchemyEventType, listener?: Listener): this {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped: Array<EthersEvent> = [];\n\n    let found = false;\n    const eventTag = getAlchemyEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n      if (found) {\n        return true;\n      }\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.removeAllListeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _removeAllListeners(eventName: AlchemyEventType): this {\n    let stopped: Array<EthersEvent> = [];\n    if (eventName == null) {\n      stopped = this._events;\n\n      this._events = [];\n    } else {\n      const eventTag = getAlchemyEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n\n    return this;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listenerCount()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listenerCount(eventName?: AlchemyEventType): number {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `BaseProvider.listeners()`.\n   *\n   * This method is copied over directly in order to implement Alchemy's unique\n   * subscription types. The only difference is that this method calls\n   * {@link getAlchemyEventTag} instead of the original `getEventTag()` method in\n   * order to parse the Alchemy subscription event.\n   *\n   * @private\n   */\n  private _listeners(eventName?: AlchemyEventType): Array<Listener> {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    const eventTag = getAlchemyEventTag(eventName);\n    return this._events\n      .filter(event => event.tag === eventTag)\n      .map(event => event.listener);\n  }\n}\n\nfunction getWebsocketConstructor(): any {\n  return isNodeEnvironment() ? require('websocket').w3cwebsocket : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== 'undefined' &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\n/** @internal */\ninterface CancelToken {\n  cancel(): void;\n  isCancelled(): boolean;\n}\n\ninterface VirtualSubscription {\n  event: EthersEvent;\n  virtualId: string;\n  physicalId: string;\n  method: string;\n  params: any[];\n  isBackfilling: boolean;\n  startingBlockNumber: number;\n  sentEvents: any[];\n  backfillBuffer: any[];\n}\n\ninterface NewHeadsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['newHeads'];\n  isBackfilling: boolean;\n  sentEvents: NewHeadsEvent[];\n  backfillBuffer: NewHeadsEvent[];\n}\n\ninterface LogsSubscription extends VirtualSubscription {\n  method: 'eth_subscribe';\n  params: ['logs', LogsSubscriptionFilter?];\n  isBackfilling: boolean;\n  sentEvents: LogsEvent[];\n  backfillBuffer: LogsEvent[];\n}\n\n// TODO(cleanup): Use class variable rather than passing `isCancelled` everywhere.\nfunction makeCancelToken(): CancelToken {\n  let cancelled = false;\n  return { cancel: () => (cancelled = true), isCancelled: () => cancelled };\n}\n\n// TODO(cleanup): replace with SDK's backoff implementation\nconst MIN_RETRY_DELAY = 1000;\nconst RETRY_BACKOFF_FACTOR = 2;\nconst MAX_RETRY_DELAY = 30000;\n\nasync function withBackoffRetries<T>(\n  f: () => Promise<T>,\n  retryCount: number,\n  shouldRetry: (error: unknown) => boolean = () => true\n): Promise<T> {\n  let nextWaitTime = 0;\n  let i = 0;\n  while (true) {\n    try {\n      return await f();\n    } catch (error) {\n      i++;\n      if (i >= retryCount || !shouldRetry(error)) {\n        throw error;\n      }\n      await delay(nextWaitTime);\n      if (!shouldRetry(error)) {\n        throw error;\n      }\n      nextWaitTime =\n        nextWaitTime === 0\n          ? MIN_RETRY_DELAY\n          : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);\n    }\n  }\n}\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction withTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      setTimeout(() => reject(new Error('Timeout')), ms)\n    )\n  ]);\n}\n\nfunction getNewHeadsBlockNumber(event: NewHeadsEvent): number {\n  return fromHex(event.number);\n}\n\nfunction getLogsBlockNumber(event: LogsEvent): number {\n  return fromHex(event.blockNumber);\n}\n\nfunction isResponse(\n  message: WebSocketMessage\n): message is SingleOrBatchResponse {\n  return (\n    Array.isArray(message) ||\n    (message.jsonrpc === '2.0' && (message as JsonRpcResponse).id !== undefined)\n  );\n}\n\nfunction isSubscriptionEvent(\n  message: WebSocketMessage\n): message is SubscriptionEvent {\n  return !isResponse(message);\n}\n\nfunction addToNewHeadsEventsBuffer(\n  pastEvents: NewHeadsEvent[],\n  event: NewHeadsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);\n}\n\nfunction addToLogsEventsBuffer(\n  pastEvents: LogsEvent[],\n  event: LogsEvent\n): void {\n  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);\n}\n\n/**\n * Adds a new event to an array of events, evicting any events which are so old\n * that they will no longer feasibly be part of a reorg.\n */\nfunction addToPastEventsBuffer<T>(\n  pastEvents: T[],\n  event: T,\n  getBlockNumber: (event: T) => number\n): void {\n  const currentBlockNumber = getBlockNumber(event);\n  // Find first index of an event recent enough to retain, then drop everything\n  // at a lower index.\n  const firstGoodIndex = pastEvents.findIndex(\n    e => getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT\n  );\n  if (firstGoodIndex === -1) {\n    pastEvents.length = 0;\n  } else {\n    pastEvents.splice(0, firstGoodIndex);\n  }\n  pastEvents.push(event);\n}\n","var naiveFallback = function () {\n\tif (typeof self === \"object\" && self) return self;\n\tif (typeof window === \"object\" && window) return window;\n\tthrow new Error(\"Unable to resolve global `this`\");\n};\n\nmodule.exports = (function () {\n\tif (this) return this;\n\n\t// Unexpected strict mode (may happen if e.g. bundled into ESM module)\n\n\t// Fallback to standard globalThis if available\n\tif (typeof globalThis === \"object\" && globalThis) return globalThis;\n\n\t// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis\n\t// In all ES5+ engines global object inherits from Object.prototype\n\t// (if you approached one that doesn't please report)\n\ttry {\n\t\tObject.defineProperty(Object.prototype, \"__global__\", {\n\t\t\tget: function () { return this; },\n\t\t\tconfigurable: true\n\t\t});\n\t} catch (error) {\n\t\t// Unfortunate case of updates to Object.prototype being restricted\n\t\t// via preventExtensions, seal or freeze\n\t\treturn naiveFallback();\n\t}\n\ttry {\n\t\t// Safari case (window.__global__ works, but __global__ does not)\n\t\tif (!__global__) return naiveFallback();\n\t\treturn __global__;\n\t} finally {\n\t\tdelete Object.prototype.__global__;\n\t}\n})();\n","export interface Options {\n    allClearResetTime?: number;\n    connectTimeout?: number;\n    debug?: boolean;\n    minReconnectDelay?: number;\n    maxReconnectDelay?: number;\n    maxReconnectAttempts?: number;\n    reconnectBackoffFactor?: number;\n    wsConstructor?: new (url: string, protocols?: string | string[]) => any;\n    shouldReconnect?(closeEvent: CloseEvent): boolean | Promise<boolean>;\n}\n\ninterface SturdyWebSocketEventMap extends WebSocketEventMap {\n    down: CloseEvent;\n    reopen: Event;\n}\n\ntype WebSocketListener<K extends keyof SturdyWebSocketEventMap> = (\n    this: WebSocket,\n    event: SturdyWebSocketEventMap[K],\n) => any;\n\ntype WebSocketListeners = {\n    [K in keyof SturdyWebSocketEventMap]?: Array<WebSocketListener<K>>;\n} & {\n    [key: string]: EventListenerOrEventListenerObject[];\n};\n\nconst SHOULD_RECONNECT_FALSE_MESSAGE =\n    \"Provided shouldReconnect() returned false. Closing permanently.\";\nconst SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE =\n    \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\nexport default class SturdyWebSocket implements WebSocket {\n    public static readonly DEFAULT_OPTIONS: Required<Options> = {\n        allClearResetTime: 5000,\n        connectTimeout: 5000,\n        debug: false,\n        minReconnectDelay: 1000,\n        maxReconnectDelay: 30000,\n        maxReconnectAttempts: Number.POSITIVE_INFINITY,\n        reconnectBackoffFactor: 1.5,\n        shouldReconnect: () => true,\n        wsConstructor: undefined!,\n    };\n\n    public static readonly CONNECTING = 0;\n    public static readonly OPEN = 1;\n    public static readonly CLOSING = 2;\n    public static readonly CLOSED = 3;\n\n    public onclose: ((event: CloseEvent) => void) | null = null;\n    public onerror: ((event: Event) => void) | null = null;\n    public onmessage: ((event: MessageEvent) => void) | null = null;\n    public onopen: ((event: Event) => void) | null = null;\n    public ondown: ((event: CloseEvent | undefined) => void) | null = null;\n    public onreopen: ((event: Event) => void) | null = null;\n    public readonly CONNECTING = SturdyWebSocket.CONNECTING;\n    public readonly OPEN = SturdyWebSocket.OPEN;\n    public readonly CLOSING = SturdyWebSocket.CLOSING;\n    public readonly CLOSED = SturdyWebSocket.CLOSED;\n\n    private readonly protocols?: string | string[];\n    private readonly options: Required<Options>;\n    private ws?: WebSocket;\n    private hasBeenOpened = false;\n    private isClosed = false;\n    private messageBuffer: any[] = [];\n    private nextRetryTime: number = 0;\n    private reconnectCount = 0;\n    private allClearTimeoutId?: any;\n    private connectTimeoutId?: any;\n    private binaryTypeInternal?: BinaryType;\n    private lastKnownExtensions = \"\";\n    private lastKnownProtocol = \"\";\n    private readonly listeners: WebSocketListeners = {};\n\n    constructor(url: string, options?: Options);\n    constructor(\n        url: string,\n        protocols: string | string[] | undefined,\n        options?: Options,\n    );\n    constructor(\n        public readonly url: string,\n        protocolsOrOptions?: string | string[] | Options,\n        options: Options = {},\n    ) {\n        if (\n            protocolsOrOptions == null ||\n            typeof protocolsOrOptions === \"string\" ||\n            Array.isArray(protocolsOrOptions)\n        ) {\n            this.protocols = protocolsOrOptions;\n        } else {\n            options = protocolsOrOptions;\n        }\n        this.options = applyDefaultOptions(options);\n        if (!this.options.wsConstructor) {\n            if (typeof WebSocket !== \"undefined\") {\n                this.options.wsConstructor = WebSocket;\n            } else {\n                throw new Error(\n                    \"WebSocket not present in global scope and no \" +\n                        \"wsConstructor option was provided.\",\n                );\n            }\n        }\n        this.openNewWebSocket();\n    }\n\n    public get binaryType(): BinaryType {\n        return this.binaryTypeInternal || \"blob\";\n    }\n\n    public set binaryType(binaryType: BinaryType) {\n        this.binaryTypeInternal = binaryType;\n        if (this.ws) {\n            this.ws.binaryType = binaryType;\n        }\n    }\n\n    public get bufferedAmount(): number {\n        let sum = this.ws ? this.ws.bufferedAmount : 0;\n        let hasUnknownAmount = false;\n        this.messageBuffer.forEach(data => {\n            const byteLength = getDataByteLength(data);\n            if (byteLength != null) {\n                sum += byteLength;\n            } else {\n                hasUnknownAmount = true;\n            }\n        });\n        if (hasUnknownAmount) {\n            this.debugLog(\n                \"Some buffered data had unknown length. bufferedAmount()\" +\n                    \" return value may be below the correct amount.\",\n            );\n        }\n        return sum;\n    }\n\n    public get extensions(): string {\n        return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    }\n\n    public get protocol(): string {\n        return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    }\n\n    public get readyState(): number {\n        return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    }\n\n    public close(code?: number, reason?: string): void {\n        this.disposeSocket(code, reason);\n        this.shutdown();\n        this.debugLog(\"WebSocket permanently closed by client.\");\n    }\n\n    public send(data: any): void {\n        if (this.isClosed) {\n            throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n        } else if (this.ws && this.ws.readyState === this.OPEN) {\n            this.ws.send(data);\n        } else {\n            this.messageBuffer.push(data);\n        }\n    }\n\n    public reconnect(): void {\n        if (this.isClosed) {\n            throw new Error(\n                \"Cannot call reconnect() on socket which is permanently closed.\",\n            );\n        }\n        this.disposeSocket(1000, \"Client requested reconnect.\");\n        this.handleClose(undefined);\n    }\n\n    public addEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    }\n\n    public dispatchEvent(event: Event): boolean {\n        return this.dispatchEventOfType(event.type, event);\n    }\n\n    public removeEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(\n                l => l !== listener,\n            );\n        }\n    }\n\n    private openNewWebSocket(): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { connectTimeout, wsConstructor } = this.options;\n        this.debugLog(`Opening new WebSocket to ${this.url}.`);\n        const ws: WebSocket = new wsConstructor(this.url, this.protocols);\n        ws.onclose = event => this.handleClose(event);\n        ws.onerror = event => this.handleError(event);\n        ws.onmessage = event => this.handleMessage(event);\n        ws.onopen = event => this.handleOpen(event);\n        this.connectTimeoutId = setTimeout(() => {\n            // If this is running, we still haven't opened the websocket.\n            // Kill it so we can try again.\n            this.clearConnectTimeout();\n            this.disposeSocket();\n            this.handleClose(undefined);\n        }, connectTimeout);\n        this.ws = ws;\n    }\n\n    private handleOpen(event: Event): void {\n        if (!this.ws || this.isClosed) {\n            return;\n        }\n        const { allClearResetTime } = this.options;\n        this.debugLog(\"WebSocket opened.\");\n        if (this.binaryTypeInternal != null) {\n            this.ws.binaryType = this.binaryTypeInternal;\n        } else {\n            this.binaryTypeInternal = this.ws.binaryType;\n        }\n        this.clearConnectTimeout();\n        if (this.hasBeenOpened) {\n            this.dispatchEventOfType(\"reopen\", event);\n        } else {\n            this.dispatchEventOfType(\"open\", event);\n            this.hasBeenOpened = true;\n        }\n        this.messageBuffer.forEach(message => this.send(message));\n        this.messageBuffer = [];\n        this.allClearTimeoutId = setTimeout(() => {\n            this.clearAllClearTimeout();\n            this.nextRetryTime = 0;\n            this.reconnectCount = 0;\n            const openTime = (allClearResetTime / 1000) | 0;\n            this.debugLog(\n                `WebSocket remained open for ${openTime} seconds. Resetting` +\n                    \" retry time and count.\",\n            );\n        }, allClearResetTime);\n    }\n\n    private handleMessage(event: MessageEvent): void {\n        if (this.isClosed) {\n            return;\n        }\n        this.dispatchEventOfType(\"message\", event);\n    }\n\n    private handleClose(event: CloseEvent | undefined): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { maxReconnectAttempts, shouldReconnect } = this.options;\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n        if (this.ws) {\n            this.lastKnownExtensions = this.ws.extensions;\n            this.lastKnownProtocol = this.ws.protocol;\n            this.disposeSocket();\n        }\n        this.dispatchEventOfType(\"down\", event);\n        if (this.reconnectCount >= maxReconnectAttempts) {\n            this.stopReconnecting(\n                event,\n                this.getTooManyFailedReconnectsMessage(),\n            );\n            return;\n        }\n        const willReconnect = !event || shouldReconnect(event);\n        if (typeof willReconnect === \"boolean\") {\n            this.handleWillReconnect(\n                willReconnect,\n                event,\n                SHOULD_RECONNECT_FALSE_MESSAGE,\n            );\n        } else {\n            willReconnect.then(willReconnectResolved => {\n                if (this.isClosed) {\n                    return;\n                }\n                this.handleWillReconnect(\n                    willReconnectResolved,\n                    event,\n                    SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE,\n                );\n            });\n        }\n    }\n\n    private handleError(event: Event): void {\n        this.dispatchEventOfType(\"error\", event);\n        this.debugLog(\"WebSocket encountered an error.\");\n    }\n\n    private handleWillReconnect(\n        willReconnect: boolean,\n        event: CloseEvent | undefined,\n        denialReason: string,\n    ): void {\n        if (willReconnect) {\n            this.reestablishConnection();\n        } else {\n            this.stopReconnecting(event, denialReason);\n        }\n    }\n\n    private reestablishConnection(): void {\n        const {\n            minReconnectDelay,\n            maxReconnectDelay,\n            reconnectBackoffFactor,\n        } = this.options;\n        this.reconnectCount++;\n        const retryTime = this.nextRetryTime;\n        this.nextRetryTime = Math.max(\n            minReconnectDelay,\n            Math.min(\n                this.nextRetryTime * reconnectBackoffFactor,\n                maxReconnectDelay,\n            ),\n        );\n        setTimeout(() => this.openNewWebSocket(), retryTime);\n        const retryTimeSeconds = (retryTime / 1000) | 0;\n        this.debugLog(\n            `WebSocket was closed. Re-opening in ${retryTimeSeconds} seconds.`,\n        );\n    }\n\n    private stopReconnecting(\n        event: CloseEvent | undefined,\n        debugReason: string,\n    ): void {\n        this.debugLog(debugReason);\n        this.shutdown();\n        if (event) {\n            this.dispatchEventOfType(\"close\", event);\n        }\n    }\n\n    private shutdown(): void {\n        this.isClosed = true;\n        this.clearAllTimeouts();\n        this.messageBuffer = [];\n        this.disposeSocket();\n    }\n\n    private disposeSocket(closeCode?: number, reason?: string): void {\n        if (!this.ws) {\n            return;\n        }\n        // Use noop handlers instead of null because some WebSocket\n        // implementations, such as the one from isomorphic-ws, raise a stink on\n        // unhandled events.\n        this.ws.onerror = noop;\n        this.ws.onclose = noop;\n        this.ws.onmessage = noop;\n        this.ws.onopen = noop;\n        this.ws.close(closeCode, reason);\n        this.ws = undefined;\n    }\n\n    private clearAllTimeouts(): void {\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n    }\n\n    private clearConnectTimeout(): void {\n        if (this.connectTimeoutId != null) {\n            clearTimeout(this.connectTimeoutId);\n            this.connectTimeoutId = undefined;\n        }\n    }\n\n    private clearAllClearTimeout(): void {\n        if (this.allClearTimeoutId != null) {\n            clearTimeout(this.allClearTimeoutId);\n            this.allClearTimeoutId = undefined;\n        }\n    }\n\n    private dispatchEventOfType(type: string, event: any): boolean {\n        switch (type) {\n            case \"close\":\n                if (this.onclose) {\n                    this.onclose(event);\n                }\n                break;\n            case \"error\":\n                if (this.onerror) {\n                    this.onerror(event);\n                }\n                break;\n            case \"message\":\n                if (this.onmessage) {\n                    this.onmessage(event);\n                }\n                break;\n            case \"open\":\n                if (this.onopen) {\n                    this.onopen(event);\n                }\n                break;\n            case \"down\":\n                if (this.ondown) {\n                    this.ondown(event);\n                }\n                break;\n            case \"reopen\":\n                if (this.onreopen) {\n                    this.onreopen(event);\n                }\n                break;\n        }\n        if (type in this.listeners) {\n            this.listeners[type]\n                .slice()\n                .forEach(listener => this.callListener(listener, event));\n        }\n        return !event || !(event as Event).defaultPrevented;\n    }\n\n    private callListener(\n        listener: EventListenerOrEventListenerObject,\n        event: Event,\n    ): void {\n        if (typeof listener === \"function\") {\n            listener.call(this, event);\n        } else {\n            listener.handleEvent.call(this, event);\n        }\n    }\n\n    private debugLog(message: string): void {\n        if (this.options.debug) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        }\n    }\n\n    private getTooManyFailedReconnectsMessage(): string {\n        const { maxReconnectAttempts } = this.options;\n        return `Failed to reconnect after ${maxReconnectAttempts} ${pluralize(\n            \"attempt\",\n            maxReconnectAttempts,\n        )}. Closing permanently.`;\n    }\n}\n\nfunction applyDefaultOptions(options: Options): Required<Options> {\n    const result: any = {};\n    Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(key => {\n        const value = (options as any)[key];\n        result[key] =\n            value === undefined\n                ? (SturdyWebSocket.DEFAULT_OPTIONS as any)[key]\n                : value;\n    });\n    return result;\n}\n\nfunction getDataByteLength(data: any): number | undefined {\n    if (typeof data === \"string\") {\n        // UTF-16 strings use two bytes per character.\n        return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n        return data.byteLength;\n    } else if (data instanceof Blob) {\n        return data.size;\n    } else {\n        return undefined;\n    }\n}\n\nfunction pluralize(s: string, n: number): string {\n    return n === 1 ? s : `${s}s`;\n}\n\nfunction noop(): void {\n    // Nothing.\n}\n","var _globalThis;\nif (typeof globalThis === 'object') {\n\t_globalThis = globalThis;\n} else {\n\ttry {\n\t\t_globalThis = require('es5-ext/global');\n\t} catch (error) {\n\t} finally {\n\t\tif (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }\n\t\tif (!_globalThis) { throw new Error('Could not determine global this'); }\n\t}\n}\n\nvar NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;\nvar websocket_version = require('./version');\n\n\n/**\n * Expose a W3C WebSocket class with just one or two arguments.\n */\nfunction W3CWebSocket(uri, protocols) {\n\tvar native_instance;\n\n\tif (protocols) {\n\t\tnative_instance = new NativeWebSocket(uri, protocols);\n\t}\n\telse {\n\t\tnative_instance = new NativeWebSocket(uri);\n\t}\n\n\t/**\n\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t * class). Since it is an Object it will be returned as it is when creating an\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t *\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\n\t */\n\treturn native_instance;\n}\nif (NativeWebSocket) {\n\t['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {\n\t\tObject.defineProperty(W3CWebSocket, prop, {\n\t\t\tget: function() { return NativeWebSocket[prop]; }\n\t\t});\n\t});\n}\n\n/**\n * Module exports.\n */\nmodule.exports = {\n    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\n    'version'      : websocket_version\n};\n","module.exports = require('../package.json').version;\n"],"names":["WS","WebSocket","Error","error","logger","Logger","version","throwError","errors","UNSUPPORTED_OPERATION","operation","NextId","WebSocketProvider","JsonRpcProvider","constructor","url","network","super","this","_pollingInterval","_wsReady","defineReadOnly","connection","detectNetwork","websocket","onopen","Object","keys","_requests","forEach","id","send","payload","onmessage","messageEvent","data","result","JSON","parse","String","request","undefined","callback","emit","action","response","provider","message","code","method","sub","_subs","params","subscription","processFunc","console","warn","fauxPoll","setInterval","unref","_websocket","_detectNetwork","pollingInterval","resetEventsBlock","blockNumber","value","poll","polling","rid","Promise","resolve","reject","stringify","jsonrpc","defaultUrl","_subscribe","tag","param","subIdPromise","_subIds","all","then","subId","_startEvent","event","type","BigNumber","from","number","toNumber","_emitted","block","_getFilter","filter","removed","formatter","filterLog","emitReceipt","hash","getTransactionReceipt","receipt","_events","e","log","_stopEvent","length","listenerCount","destroy","readyState","CONNECTING","onerror","close","WebsocketBackfiller","maxBackfillBlocks","getNewHeadsBackfill","isCancelled","previousHeads","fromBlockNumber","throwIfCancelled","toBlockNumber","getBlockNumber","getHeadEventsInRange","Math","max","lastSeenBlockNumber","fromHex","minBlockNumber","reorgHeads","getReorgHeads","intermediateHeads","getLogsBackfill","previousLogs","getLogsInRange","commonAncestor","getCommonAncestor","removedLogs","map","assign","fromBlockInclusive","Number","NEGATIVE_INFINITY","addedLogs","logIndex","setMaxBackfillBlock","newMax","blockNumberHex","toBlockExclusive","batchParts","i","push","toHex","sendBatch","toNewHeadsEvent","oldEvent","blockHead","getBlockByNumber","reverse","oldLog","blockHash","rangeFilter","fromBlock","toBlock","head","totalDifficulty","transactions","uncles","dedupe","items","getKey","keysSeen","Set","item","key","has","add","CANCELLED","RETAINED_EVENT_BLOCK_COUNT","AlchemyWebSocketProvider","config","wsConstructor","apiKey","AlchemyProvider","getApiKey","alchemyNetwork","getAlchemyNetwork","getAlchemyConnectionInfo","protocol","concat","VERSION","SturdyWebSocket","_a","process","versions","node","require","EthersNetwork","virtualSubscriptionsById","Map","virtualIdsByPhysicalId","handleMessage","Array","isArray","isResponse","isSubscriptionEvent","physicalId","virtualId","get","newHeadsSubscription","newHeadsMessage","isBackfilling","backfillBuffer","pastEvents","addToPastEventsBuffer","getNewHeadsBlockNumber","addToNewHeadsEventsBuffer","emitAndRememberEvent","rememberEvent","logsSubscription","logsMessage","getLogsBlockNumber","addToLogsEventsBuffer","emitEvent","handleReopen","clear","cancel","cancelled","makeCancelToken","cancelBackfill","values","__awaiter","resubscribeAndBackfill","startHeartbeat","stopHeartbeatAndBackfill","heartbeatIntervalId","clearInterval","backfiller","addSocketListeners","noop","getNetwork","CustomNetworks","on","eventName","listener","_addEventListener","once","off","isAlchemyEvent","_off","removeAllListeners","_removeAllListeners","_listenerCount","listeners","_listeners","verifyAlchemyEventName","EthersEvent","getAlchemyEventTag","ALCHEMY_EVENT_TYPES","includes","customStartEvent","startingBlockNumber","resolvedParams","set","sentEvents","_len","arguments","args","_key","stopped","eventTag","setTimeout","apply","parts","nextId","_ref","sendBatchConcurrently","removeSocketListeners","isCommunityResource","DEFAULT_ALCHEMY_API_KEY","addEventListener","removeEventListener","backfillEvents","withBackoffRetries","withTimeout","events","dedupeNewHeads","emitNewHeadsEvent","dedupeLogs","emitLogsEvent","emitGenericEvent","emitProcessFn","emitFunction","reconnect","req","ALCHEMY_PENDING_TRANSACTIONS_EVENT_TYPE","fromAddress","toAddress","hashesOnly","AlchemySubscription","PENDING_TRANSACTIONS","ALCHEMY_MINED_TRANSACTIONS_EVENT_TYPE","addresses","includeRemoved","MINED_TRANSACTIONS","found","MIN_RETRY_DELAY","RETRY_BACKOFF_FACTOR","MAX_RETRY_DELAY","f","retryCount","shouldRetry","nextWaitTime","delay","min","ms","promise","race","_","currentBlockNumber","firstGoodIndex","findIndex","splice","naiveFallback","self","window","module","exports","globalThis","defineProperty","prototype","configurable","__global__","protocolsOrOptions","options","onclose","ondown","onreopen","OPEN","CLOSING","CLOSED","hasBeenOpened","isClosed","messageBuffer","nextRetryTime","reconnectCount","lastKnownExtensions","lastKnownProtocol","protocols","applyDefaultOptions","openNewWebSocket","binaryTypeInternal","binaryType","ws","sum","bufferedAmount","hasUnknownAmount","byteLength","ArrayBuffer","Blob","size","getDataByteLength","debugLog","extensions","reason","disposeSocket","shutdown","handleClose","dispatchEvent","dispatchEventOfType","l","_this","connectTimeout","handleError","handleOpen","connectTimeoutId","clearConnectTimeout","allClearResetTime","allClearTimeoutId","clearAllClearTimeout","openTime","maxReconnectAttempts","shouldReconnect","stopReconnecting","getTooManyFailedReconnectsMessage","willReconnect","handleWillReconnect","willReconnectResolved","denialReason","reestablishConnection","minReconnectDelay","maxReconnectDelay","reconnectBackoffFactor","retryTime","retryTimeSeconds","debugReason","clearAllTimeouts","closeCode","clearTimeout","slice","callListener","defaultPrevented","call","handleEvent","debug","s","DEFAULT_OPTIONS","POSITIVE_INFINITY","_globalThis","NativeWebSocket","MozWebSocket","websocket_version","W3CWebSocket","uri","prop"],"sourceRoot":""}