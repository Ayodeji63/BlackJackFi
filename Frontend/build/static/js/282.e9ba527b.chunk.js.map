{"version":3,"file":"static/js/282.e9ba527b.chunk.js","mappings":";8UAKYA,OAAO,GAAnB,MACMC,EAAMD,OAAO,GACbE,EAAMF,OAAO,GAWb,SAAUG,EAAQC,GACtB,OACEA,aAAaC,YACP,MAALD,GAA0B,kBAANA,GAAyC,eAAvBA,EAAEE,YAAYC,IAEzD,CAGA,MAAMC,EAAwBC,MAAMC,KAAK,CAAEC,OAAQ,MAAO,CAACC,EAAGC,IAC5DA,EAAEC,SAAS,IAAIC,SAAS,EAAG,OAKvB,SAAUC,EAAWC,GACzB,IAAKd,EAAQc,GAAQ,MAAM,IAAIC,MAAM,uBAErC,IAAIC,EAAM,GACV,IAAK,IAAIN,EAAI,EAAGA,EAAII,EAAMN,OAAQE,IAChCM,GAAOX,EAAMS,EAAMJ,IAErB,OAAOM,CACT,CAOM,SAAUC,EAAYD,GAC1B,GAAmB,kBAARA,EAAkB,MAAM,IAAID,MAAM,mCAAqCC,GAElF,OAAOnB,OAAe,KAARmB,EAAa,IAAM,KAAHE,OAAQF,GACxC,CAGA,MAAMG,EAAS,CAAEC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,KAC7D,SAASC,EAAcC,GACrB,OAAIA,GAAQR,EAAOC,IAAMO,GAAQR,EAAOE,GAAWM,EAAOR,EAAOC,GAC7DO,GAAQR,EAAOG,IAAMK,GAAQR,EAAOI,GAAWI,GAAQR,EAAOG,GAAK,IACnEK,GAAQR,EAAOK,IAAMG,GAAQR,EAAOM,GAAWE,GAAQR,EAAOK,GAAK,SAAvE,CAEF,CAKM,SAAUI,EAAWZ,GACzB,GAAmB,kBAARA,EAAkB,MAAM,IAAID,MAAM,mCAAqCC,GAClF,MAAMa,EAAKb,EAAIR,OACTsB,EAAKD,EAAK,EAChB,GAAIA,EAAK,EAAG,MAAM,IAAId,MAAM,0DAA4Dc,GACxF,MAAME,EAAQ,IAAI7B,WAAW4B,GAC7B,IAAK,IAAIE,EAAK,EAAGC,EAAK,EAAGD,EAAKF,EAAIE,IAAMC,GAAM,EAAG,CAC/C,MAAMC,EAAKR,EAAcV,EAAImB,WAAWF,IAClCG,EAAKV,EAAcV,EAAImB,WAAWF,EAAK,IAC7C,QAAWI,IAAPH,QAA2BG,IAAPD,EAAkB,CACxC,MAAMT,EAAOX,EAAIiB,GAAMjB,EAAIiB,EAAK,GAChC,MAAM,IAAIlB,MAAM,+CAAiDY,EAAO,cAAgBM,EAC1F,CACAF,EAAMC,GAAW,GAALE,EAAUE,CACxB,CACA,OAAOL,CACT,CAGM,SAAUO,EAAgBxB,GAC9B,OAAOG,EAAYJ,EAAWC,GAChC,CACM,SAAUyB,EAAgBzB,GAC9B,IAAKd,EAAQc,GAAQ,MAAM,IAAIC,MAAM,uBACrC,OAAOE,EAAYJ,EAAWX,WAAWK,KAAKO,GAAO0B,WACvD,CAEM,SAAUC,EAAgBC,EAAoBC,GAClD,OAAOf,EAAWc,EAAE/B,SAAS,IAAIC,SAAe,EAAN+B,EAAS,KACrD,CACM,SAAUC,EAAgBF,EAAoBC,GAClD,OAAOF,EAAgBC,EAAGC,GAAKH,SACjC,CAeM,SAAUK,EAAYC,EAAe9B,EAAU+B,GACnD,IAAIC,EACJ,GAAmB,kBAARhC,EACT,IACEgC,EAAMpB,EAAWZ,EACnB,CAAE,MAAOiC,GACP,MAAM,IAAIlC,MAAM,GAADG,OAAI4B,EAAK,oCAAA5B,OAAmCF,EAAG,cAAAE,OAAa+B,GAC7E,KACK,KAAIjD,EAAQgB,GAKjB,MAAM,IAAID,MAAM,GAADG,OAAI4B,EAAK,sCAFxBE,EAAM9C,WAAWK,KAAKS,EAGxB,CACA,MAAM2B,EAAMK,EAAIxC,OAChB,GAA8B,kBAAnBuC,GAA+BJ,IAAQI,EAChD,MAAM,IAAIhC,MAAM,GAADG,OAAI4B,EAAK,cAAA5B,OAAa6B,EAAc,gBAAA7B,OAAeyB,IACpE,OAAOK,CACT,CAKM,SAAUE,IACd,IAAIC,EAAM,EACV,IAAK,IAAIzC,EAAI,EAAGA,EAAI0C,UAAO5C,OAAQE,IAAK,CACtC,MAAMT,EAAWS,EAAC,GAAA0C,UAAA5C,QAADE,OAAC2B,EAAAe,UAAD1C,GACjB,IAAKV,EAAQC,GAAI,MAAM,IAAIc,MAAM,uBACjCoC,GAAOlD,EAAEO,MACX,CACA,IAAIwC,EAAM,IAAI9C,WAAWiD,GACrBE,EAAM,EACV,IAAK,IAAI3C,EAAI,EAAGA,EAAI0C,UAAO5C,OAAQE,IAAK,CACtC,MAAMT,EAAWS,EAAC,GAAA0C,UAAA5C,QAADE,OAAC2B,EAAAe,UAAD1C,GACjBsC,EAAIM,IAAIrD,EAAGoD,GACXA,GAAOpD,EAAEO,MACX,CACA,OAAOwC,CACT,CA8CO,MAQMO,EAAWb,IAAe3C,GAAOF,OAAO6C,EAAI,IAAM5C,EAIzD0D,EAAOC,GAAe,IAAIvD,WAAWuD,GACrCC,EAAQC,GAAazD,WAAWK,KAAKoD,GASrC,SAAUC,EACdC,EACAC,EACAC,GAEA,GAAuB,kBAAZF,GAAwBA,EAAU,EAAG,MAAM,IAAI9C,MAAM,4BAChE,GAAwB,kBAAb+C,GAAyBA,EAAW,EAAG,MAAM,IAAI/C,MAAM,6BAClE,GAAsB,oBAAXgD,EAAuB,MAAM,IAAIhD,MAAM,6BAElD,IAAIiD,EAAIR,EAAIK,GACRI,EAAIT,EAAIK,GACRnD,EAAI,EACR,MAAMwD,EAAQA,KACZF,EAAEG,KAAK,GACPF,EAAEE,KAAK,GACPzD,EAAI,CAAC,EAED0D,EAAI,mBAAAC,EAAAjB,UAAA5C,OAAI8D,EAAe,IAAAhE,MAAA+D,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAfD,EAAeC,GAAAnB,UAAAmB,GAAA,OAAKR,EAAOE,EAAGD,KAAMM,EAAE,EAC9CE,EAAS,WAAiB,IAAhBC,EAAIrB,UAAA5C,OAAA,QAAA6B,IAAAe,UAAA,GAAAA,UAAA,GAAGI,IAErBS,EAAIG,EAAEV,EAAK,CAAC,IAAQe,GACpBT,EAAII,IACgB,IAAhBK,EAAKjE,SACTyD,EAAIG,EAAEV,EAAK,CAAC,IAAQe,GACpBT,EAAII,IACN,EACMM,EAAMA,KAEV,GAAIhE,KAAO,IAAM,MAAM,IAAIK,MAAM,2BACjC,IAAI4B,EAAM,EACV,MAAMgC,EAAoB,GAC1B,KAAOhC,EAAMmB,GAAU,CACrBE,EAAII,IACJ,MAAMQ,EAAKZ,EAAEa,QACbF,EAAIG,KAAKF,GACTjC,GAAOqB,EAAExD,MACX,CACA,OAAO0C,KAAeyB,EAAI,EAU5B,MARiBI,CAACN,EAAkBO,KAGlC,IAAIhC,EACJ,IAHAkB,IACAM,EAAOC,KAEEzB,EAAMgC,EAAKN,OAASF,IAE7B,OADAN,IACOlB,CAAG,CAGd,CAIA,MAAMiC,EAAe,CACnBC,OAASC,GAA4B,kBAARA,EAC7BC,SAAWD,GAA4B,oBAARA,EAC/BE,QAAUF,GAA4B,mBAARA,EAC9BG,OAASH,GAA4B,kBAARA,EAC7BI,mBAAqBJ,GAA4B,kBAARA,GAAoBnF,EAAQmF,GACrEK,cAAgBL,GAAaM,OAAOD,cAAcL,GAClDpD,MAAQoD,GAAa7E,MAAMoF,QAAQP,GACnCQ,MAAOA,CAACR,EAAUS,IAAiBA,EAAeC,GAAGC,QAAQX,GAC7DY,KAAOZ,GAA4B,oBAARA,GAAsBM,OAAOD,cAAcL,EAAIa,YAMtE,SAAUC,EACdL,EACAM,GAC6B,IAA7BC,EAAA/C,UAAA5C,OAAA,QAAA6B,IAAAe,UAAA,GAAAA,UAAA,GAA2B,CAAC,EAE5B,MAAMgD,EAAaA,CAACC,EAAoBC,EAAiBC,KACvD,MAAMC,EAAWvB,EAAaqB,GAC9B,GAAwB,oBAAbE,EACT,MAAM,IAAIzF,MAAM,sBAADG,OAAuBoF,EAAI,yBAE5C,MAAMnB,EAAMS,EAAOS,GACnB,KAAIE,QAAsBlE,IAAR8C,KACbqB,EAASrB,EAAKS,GACjB,MAAM,IAAI7E,MAAM,iBAADG,OACIuF,OAAOJ,GAAU,KAAAnF,OAAIiE,EAAG,MAAAjE,cAAYiE,EAAG,gBAAAjE,OAAeoF,GAE3E,EAEF,IAAK,MAAOD,EAAWC,KAASI,OAAOC,QAAQT,GAAaE,EAAWC,EAAWC,GAAO,GACzF,IAAK,MAAOD,EAAWC,KAASI,OAAOC,QAAQR,GAAgBC,EAAWC,EAAWC,GAAO,GAC5F,OAAOV,CACT,CCvSA,MAAMgB,EAAM/G,OAAO,GAAIC,EAAMD,OAAO,GAAIE,EAAMF,OAAO,GAAIgH,EAAMhH,OAAO,GAEhEiH,EAAMjH,OAAO,GAAIkH,EAAMlH,OAAO,GAAImH,EAAMnH,OAAO,GAEzCA,OAAO,GAAWA,OAAO,IAG/B,SAAUoH,EAAIhH,EAAWqE,GAC7B,MAAM4C,EAASjH,EAAIqE,EACnB,OAAO4C,GAAUN,EAAMM,EAAS5C,EAAI4C,CACtC,CAQM,SAAUC,EAAIC,EAAaC,EAAeC,GAC9C,GAAIA,GAAUV,GAAOS,EAAQT,EAAK,MAAM,IAAI7F,MAAM,6BAClD,GAAIuG,IAAWxH,EAAK,OAAO8G,EAC3B,IAAI5D,EAAMlD,EACV,KAAOuH,EAAQT,GACTS,EAAQvH,IAAKkD,EAAOA,EAAMoE,EAAOE,GACrCF,EAAOA,EAAMA,EAAOE,EACpBD,IAAUvH,EAEZ,OAAOkD,CACT,CAaM,SAAUuE,EAAOC,EAAgBF,GACrC,GAAIE,IAAWZ,GAAOU,GAAUV,EAC9B,MAAM,IAAI7F,MAAM,6CAADG,OAA8CsG,EAAM,SAAAtG,OAAQoG,IAI7E,IAAIrH,EAAIgH,EAAIO,EAAQF,GAChBhD,EAAIgD,EAEJG,EAAIb,EAAKc,EAAI5H,EAAK6H,EAAI7H,EAAKkE,EAAI4C,EACnC,KAAO3G,IAAM2G,GAAK,CAEhB,MAAMgB,EAAItD,EAAIrE,EACR4H,EAAIvD,EAAIrE,EACR6H,EAAIL,EAAIE,EAAIC,EACZlF,EAAIgF,EAAI1D,EAAI4D,EAElBtD,EAAIrE,EAAGA,EAAI4H,EAAGJ,EAAIE,EAAGD,EAAI1D,EAAG2D,EAAIG,EAAG9D,EAAItB,CACzC,CAEA,GADY4B,IACAxE,EAAK,MAAM,IAAIiB,MAAM,0BACjC,OAAOkG,EAAIQ,EAAGH,EAChB,CAkEM,SAAUS,EAAOC,GAMrB,GAAIA,EAAIlB,IAAQD,EAAK,CAKnB,MAAMoB,GAAUD,EAAIlI,GAAOgH,EAC3B,OAAO,SAAsBjB,EAAenD,GAC1C,MAAMwF,EAAOrC,EAAGsB,IAAIzE,EAAGuF,GAEvB,IAAKpC,EAAGsC,IAAItC,EAAGuC,IAAIF,GAAOxF,GAAI,MAAM,IAAI3B,MAAM,2BAC9C,OAAOmH,CACT,CACF,CAGA,GAAIF,EAAIhB,IAAQD,EAAK,CACnB,MAAMsB,GAAML,EAAIjB,GAAOC,EACvB,OAAO,SAAsBnB,EAAenD,GAC1C,MAAMN,EAAKyD,EAAGyC,IAAI5F,EAAG3C,GACfiE,EAAI6B,EAAGsB,IAAI/E,EAAIiG,GACfE,EAAK1C,EAAGyC,IAAI5F,EAAGsB,GACftD,EAAImF,EAAGyC,IAAIzC,EAAGyC,IAAIC,EAAIxI,GAAMiE,GAC5BkE,EAAOrC,EAAGyC,IAAIC,EAAI1C,EAAG2C,IAAI9H,EAAGmF,EAAG4C,MACrC,IAAK5C,EAAGsC,IAAItC,EAAGuC,IAAIF,GAAOxF,GAAI,MAAM,IAAI3B,MAAM,2BAC9C,OAAOmH,CACT,CACF,CA0BA,OAlHI,SAAwBF,GAM5B,MAAMU,GAAaV,EAAIlI,GAAOC,EAE9B,IAAI4I,EAAWC,EAAWC,EAG1B,IAAKF,EAAIX,EAAIlI,EAAK8I,EAAI,EAAGD,EAAI5I,IAAQ6G,EAAK+B,GAAK5I,EAAK6I,KAGpD,IAAKC,EAAI9I,EAAK8I,EAAIb,GAAKb,EAAI0B,EAAGH,EAAWV,KAAOA,EAAIlI,EAAK+I,KAGzD,GAAU,IAAND,EAAS,CACX,MAAMX,GAAUD,EAAIlI,GAAOgH,EAC3B,OAAO,SAAwBjB,EAAenD,GAC5C,MAAMwF,EAAOrC,EAAGsB,IAAIzE,EAAGuF,GACvB,IAAKpC,EAAGsC,IAAItC,EAAGuC,IAAIF,GAAOxF,GAAI,MAAM,IAAI3B,MAAM,2BAC9C,OAAOmH,CACT,CACF,CAGA,MAAMY,GAAUH,EAAI7I,GAAOC,EAC3B,OAAO,SAAwB8F,EAAenD,GAE5C,GAAImD,EAAGsB,IAAIzE,EAAGgG,KAAe7C,EAAGkD,IAAIlD,EAAG4C,KAAM,MAAM,IAAI1H,MAAM,2BAC7D,IAAI8G,EAAIe,EAEJI,EAAInD,EAAGsB,IAAItB,EAAGyC,IAAIzC,EAAG4C,IAAKI,GAAIF,GAC9BlB,EAAI5B,EAAGsB,IAAIzE,EAAGoG,GACdxE,EAAIuB,EAAGsB,IAAIzE,EAAGiG,GAElB,MAAQ9C,EAAGsC,IAAI7D,EAAGuB,EAAG4C,MAAM,CACzB,GAAI5C,EAAGsC,IAAI7D,EAAGuB,EAAGoD,MAAO,OAAOpD,EAAGoD,KAElC,IAAInB,EAAI,EACR,IAAK,IAAIoB,EAAKrD,EAAGuC,IAAI9D,GAAIwD,EAAID,IACvBhC,EAAGsC,IAAIe,EAAIrD,EAAG4C,KADYX,IAE9BoB,EAAKrD,EAAGuC,IAAIc,GAGd,MAAMC,EAAKtD,EAAGsB,IAAI6B,EAAGlJ,GAAOD,OAAOgI,EAAIC,EAAI,IAC3CkB,EAAInD,EAAGuC,IAAIe,GACX1B,EAAI5B,EAAGyC,IAAIb,EAAG0B,GACd7E,EAAIuB,EAAGyC,IAAIhE,EAAG0E,GACdnB,EAAIC,CACN,CACA,OAAOL,CACT,CACF,CA4DS2B,CAAcpB,EACvB,CAGO,MA6CDqB,EAAe,CACnB,SAAU,UAAW,MAAO,MAAO,MAAO,OAAQ,MAClD,MAAO,MAAO,MAAO,MAAO,MAAO,MACnC,OAAQ,OAAQ,OAAQ,QA2EpB,SAAUC,EAAQ5G,EAAW6G,GAEjC,MAAMC,OAA6BnH,IAAfkH,EAA2BA,EAAa7G,EAAE/B,SAAS,GAAGH,OAE1E,MAAO,CAAE+I,WAAYC,EAAaC,YADdC,KAAKC,KAAKH,EAAc,GAE9C,CA8GM,SAAUI,EAAoBC,GAClC,GAA0B,kBAAfA,EAAyB,MAAM,IAAI9I,MAAM,8BACpD,MAAM+I,EAAYD,EAAWlJ,SAAS,GAAGH,OACzC,OAAOkJ,KAAKC,KAAKG,EAAY,EAC/B,CASM,SAAUC,EAAiBF,GAC/B,MAAMrJ,EAASoJ,EAAoBC,GACnC,OAAOrJ,EAASkJ,KAAKC,KAAKnJ,EAAS,EACrC,CCrcA,MAAMoG,EAAM/G,OAAO,GACbC,EAAMD,OAAO,GAgLb,SAAUmK,EAAqBC,GAgBnC,ODmEOhE,EClFOgE,EAAMpE,GD8EPwD,EAAaa,QAAO,CAACC,EAAKhF,KACrCgF,EAAIhF,GAAO,WACJgF,IARO,CACdC,MAAO,SACPC,KAAM,SACNC,MAAO,gBACPC,KAAM,mBC3ERtE,EACEgE,EACA,CACEvH,EAAG,SACH0B,EAAG,SACHoG,GAAI,QACJC,GAAI,SAEN,CACElB,WAAY,gBACZE,YAAa,kBAIV/C,OAAOgE,OAAO,IAChBpB,EAAQW,EAAMvH,EAAGuH,EAAMV,eACvBU,EACEU,EAAGV,EAAMpE,GAAGuE,OAErB,CCrEA,MAAQ9H,gBAAiBsI,EAAKhJ,WAAYiJ,GAAQC,EACrCC,EAAM,CAEjBC,IAAK,cAAqBjK,MACxBZ,WAAAA,GACE8K,MADW7H,UAAA5C,OAAA,QAAA6B,IAAAe,UAAA,GAAAA,UAAA,GAAG,GAEhB,GAEF8H,SAAAA,CAAUzH,GACR,MAAQuH,IAAKG,GAAMJ,EACnB,GAAItH,EAAKjD,OAAS,GAAiB,IAAZiD,EAAK,GAAa,MAAM,IAAI0H,EAAE,iCACrD,MAAMxI,EAAMc,EAAK,GACXT,EAAMS,EAAK2H,SAAS,EAAGzI,EAAM,GACnC,IAAKA,GAAOK,EAAIxC,SAAWmC,EAAK,MAAM,IAAIwI,EAAE,2CAK5C,GAAa,IAATnI,EAAI,GAAiB,MAAM,IAAImI,EAAE,uCACrC,GAAe,IAAXnI,EAAI,MAA0B,IAATA,EAAI,IAC3B,MAAM,IAAImI,EAAE,uDACd,MAAO,CAAEE,EAAGT,EAAI5H,GAAMsI,EAAG7H,EAAK2H,SAASzI,EAAM,GAC/C,EACA4I,KAAAA,CAAMvK,GAEJ,MAAQgK,IAAKG,GAAMJ,EACbtH,EAAsB,kBAARzC,EAAmB6J,EAAI7J,GAAOA,EAClD,IAAK8J,EAAWrH,GAAO,MAAM,IAAI1C,MAAM,iBACvC,IAAIuK,EAAI7H,EAAKjD,OACb,GAAI8K,EAAI,GAAgB,IAAX7H,EAAK,GAAY,MAAM,IAAI0H,EAAE,yBAC1C,GAAI1H,EAAK,KAAO6H,EAAI,EAAG,MAAM,IAAIH,EAAE,uCACnC,MAAQE,EAAGxD,EAAGyD,EAAGE,GAAWT,EAAIG,UAAUzH,EAAK2H,SAAS,KAChDC,EAAGI,EAAGH,EAAGI,GAAeX,EAAIG,UAAUM,GAC9C,GAAIE,EAAWlL,OAAQ,MAAM,IAAI2K,EAAE,+CACnC,MAAO,CAAEtD,IAAG4D,IACd,EACAE,UAAAA,CAAWC,GAET,MAAM/G,EAAS4G,GAAmD,EAA5BhG,OAAOoG,SAASJ,EAAE,GAAI,IAAe,KAAOA,EAAIA,EAChFrH,EAAKgD,IACT,MAAMpG,EAAMoG,EAAIzG,SAAS,IACzB,OAAoB,EAAbK,EAAIR,OAAa,IAAHU,OAAOF,GAAQA,CAAG,EAEnCyK,EAAI5G,EAAMT,EAAEwH,EAAIH,IAChB5D,EAAIhD,EAAMT,EAAEwH,EAAI/D,IAChBiE,EAAML,EAAEjL,OAAS,EACjBuL,EAAMlE,EAAErH,OAAS,EACjBoE,EAAKR,EAAE0H,GACPE,EAAK5H,EAAE2H,GACb,MAAO,KAAP7K,OAAYkD,EAAE2H,EAAMD,EAAM,GAAE,MAAA5K,OAAK8K,GAAE9K,OAAG2G,EAAC,MAAA3G,OAAK0D,GAAE1D,OAAGuK,EACnD,GAKI7E,EAAM/G,OAAO,GAAIC,EAAMD,OAAO,GAAqBgH,GAAXhH,OAAO,GAAUA,OAAO,IAAUA,OAAO,GAEjF,SAAUoM,EAAqBC,GACnC,MAAMC,EArGR,SAA8BlC,GAC5B,MAAMiC,EAAOlC,EAAcC,GAC3Ba,EACEoB,EACA,CACEjM,EAAG,QACHqE,EAAG,SAEL,CACE8H,yBAA0B,QAC1BC,eAAgB,UAChBC,cAAe,WACfC,cAAe,WACfC,mBAAoB,UACpBC,UAAW,WACXC,QAAS,aAGb,MAAM,KAAEC,EAAI,GAAE9G,EAAE,EAAE5F,GAAMiM,EACxB,GAAIS,EAAM,CACR,IAAK9G,EAAGsC,IAAIlI,EAAG4F,EAAGoD,MAChB,MAAM,IAAIlI,MAAM,qEAElB,GACkB,kBAAT4L,GACc,kBAAdA,EAAKC,MACgB,oBAArBD,EAAKE,YAEZ,MAAM,IAAI9L,MAAM,oEAEpB,CACA,OAAO2F,OAAOgE,OAAO,IAAKwB,GAC5B,CAqEgBY,CAAkBZ,IAC1B,GAAErG,GAAOsG,EAETO,EACJP,EAAMO,SAAO,EACXK,EAAwBC,EAAyBC,KACjD,MAAMhN,EAAI+M,EAAME,WAChB,OAAOpC,EAAe5K,WAAWK,KAAK,CAAC,IAAQsF,EAAG6G,QAAQzM,EAAEwH,GAAI5B,EAAG6G,QAAQzM,EAAEyH,GAC9E,GACG+E,EACJN,EAAMM,WAAS,CACb3L,IAEA,MAAMqM,EAAOrM,EAAMsK,SAAS,GAI5B,MAAO,CAAE3D,EAFC5B,EAAG4G,UAAUU,EAAK/B,SAAS,EAAGvF,EAAGyE,QAE/B5C,EADF7B,EAAG4G,UAAUU,EAAK/B,SAASvF,EAAGyE,MAAO,EAAIzE,EAAGyE,QAEvD,GAMH,SAAS8C,EAAoB3F,GAC3B,MAAM,EAAExH,EAAC,EAAEqE,GAAM6H,EACXkB,EAAKxH,EAAGuC,IAAIX,GACZ6F,EAAKzH,EAAGyC,IAAI+E,EAAI5F,GACtB,OAAO5B,EAAG0H,IAAI1H,EAAG0H,IAAID,EAAIzH,EAAGyC,IAAIb,EAAGxH,IAAKqE,EAC1C,CAKA,IAAKuB,EAAGsC,IAAItC,EAAGuC,IAAI+D,EAAM1B,IAAK2C,EAAoBjB,EAAM3B,KACtD,MAAM,IAAIzJ,MAAM,+CAGlB,SAASyM,EAAmBpG,GAC1B,MAAsB,kBAARA,GAAoBR,EAAMQ,GAAOA,EAAM+E,EAAMzJ,CAC7D,CACA,SAAS+K,EAASrG,GAChB,IAAKoG,EAAmBpG,GAAM,MAAM,IAAIrG,MAAM,8CAChD,CAGA,SAAS2M,EAAuBC,GAC9B,MAAQvB,yBAA0BwB,EAAO,YAAEnE,EAAW,eAAE4C,EAAc,EAAE3J,GAAMyJ,EAC9E,GAAIyB,GAA0B,kBAARD,EAAkB,CAGtC,GAFI7C,EAAW6C,KAAMA,EAAM7C,EAAc6C,IAEtB,kBAARA,IAAqBC,EAAQC,SAASF,EAAInN,QAAS,MAAM,IAAIO,MAAM,eAC9E4M,EAAMA,EAAI/M,SAAuB,EAAd6I,EAAiB,IACtC,CACA,IAAIrC,EACJ,IACEA,EACiB,kBAARuG,EACHA,EACA7C,EAAmBjI,EAAY,cAAe8K,EAAKlE,GAC3D,CAAE,MAAOqE,GACP,MAAM,IAAI/M,MAAM,uBAADG,OAAwBuI,EAAW,+BAAAvI,cAAqCyM,GACzF,CAGA,OAFItB,IAAgBjF,EAAMH,EAAQG,EAAK1E,IACvC+K,EAASrG,GACFA,CACT,CAEA,MAAM2G,EAAmB,IAAIC,IAC7B,SAASC,EAAeC,GACtB,KAAMA,aAAiBC,GAAQ,MAAM,IAAIpN,MAAM,2BACjD,CAMA,MAAMoN,EAIJhO,WAAAA,CACWiO,EACAC,EACAC,GAET,GAJS,KAAAF,GAAAA,EACA,KAAAC,GAAAA,EACA,KAAAC,GAAAA,EAEC,MAANF,IAAevI,EAAGC,QAAQsI,GAAK,MAAM,IAAIrN,MAAM,cACnD,GAAU,MAANsN,IAAexI,EAAGC,QAAQuI,GAAK,MAAM,IAAItN,MAAM,cACnD,GAAU,MAANuN,IAAezI,EAAGC,QAAQwI,GAAK,MAAM,IAAIvN,MAAM,aACrD,CAIA,iBAAOwN,CAAW5D,GAChB,MAAM,EAAElD,EAAC,EAAEC,GAAMiD,GAAK,CAAC,EACvB,IAAKA,IAAM9E,EAAGC,QAAQ2B,KAAO5B,EAAGC,QAAQ4B,GAAI,MAAM,IAAI3G,MAAM,wBAC5D,GAAI4J,aAAawD,EAAO,MAAM,IAAIpN,MAAM,gCACxC,MAAMyN,EAAO9N,GAASmF,EAAGsC,IAAIzH,EAAGmF,EAAGoD,MAEnC,OAAIuF,EAAI/G,IAAM+G,EAAI9G,GAAWyG,EAAMlF,KAC5B,IAAIkF,EAAM1G,EAAGC,EAAG7B,EAAG4C,IAC5B,CAEA,KAAIhB,GACF,OAAOgH,KAAKvB,WAAWzF,CACzB,CACA,KAAIC,GACF,OAAO+G,KAAKvB,WAAWxF,CACzB,CAQA,iBAAOgH,CAAWC,GAChB,MAAMC,EAAQ/I,EAAGgJ,YAAYF,EAAOxE,KAAKQ,GAAMA,EAAE2D,MACjD,OAAOK,EAAOxE,KAAI,CAACQ,EAAGjK,IAAMiK,EAAEuC,SAAS0B,EAAMlO,MAAKyJ,IAAIgE,EAAMI,WAC9D,CAMA,cAAOO,CAAQ9N,GACb,MAAMgH,EAAImG,EAAMI,WAAW9B,EAAU5J,EAAY,WAAY7B,KAE7D,OADAgH,EAAE+G,iBACK/G,CACT,CAGA,qBAAOgH,CAAeC,GACpB,OAAOd,EAAMe,KAAKC,SAASzB,EAAuBuB,GACpD,CAQAG,cAAAA,CAAeC,GACbZ,KAAKa,aAAeD,EACpBtB,EAAiBwB,OAAOd,KAC1B,CAGAM,cAAAA,GACE,GAAIN,KAAKD,MAAO,CAId,GAAIrC,EAAMK,qBAAuB3G,EAAG2I,IAAIC,KAAKJ,IAAK,OAClD,MAAM,IAAItN,MAAM,kBAClB,CAEA,MAAM,EAAE0G,EAAC,EAAEC,GAAM+G,KAAKvB,WAEtB,IAAKrH,EAAGC,QAAQ2B,KAAO5B,EAAGC,QAAQ4B,GAAI,MAAM,IAAI3G,MAAM,4BACtD,MAAMyO,EAAO3J,EAAGuC,IAAIV,GACd+H,EAAQrC,EAAoB3F,GAClC,IAAK5B,EAAGsC,IAAIqH,EAAMC,GAAQ,MAAM,IAAI1O,MAAM,qCAC1C,IAAK0N,KAAKnC,gBAAiB,MAAM,IAAIvL,MAAM,yCAC7C,CACA2O,QAAAA,GACE,MAAM,EAAEhI,GAAM+G,KAAKvB,WACnB,GAAIrH,EAAG8J,MAAO,OAAQ9J,EAAG8J,MAAMjI,GAC/B,MAAM,IAAI3G,MAAM,8BAClB,CAKA6O,MAAAA,CAAO1B,GACLD,EAAeC,GACf,MAAQE,GAAIyB,EAAIxB,GAAIyB,EAAIxB,GAAIyB,GAAOtB,MAC3BL,GAAI4B,EAAI3B,GAAI4B,EAAI3B,GAAI4B,GAAOhC,EAC7BiC,EAAKtK,EAAGsC,IAAItC,EAAGyC,IAAIuH,EAAIK,GAAKrK,EAAGyC,IAAI0H,EAAID,IACvCK,EAAKvK,EAAGsC,IAAItC,EAAGyC,IAAIwH,EAAII,GAAKrK,EAAGyC,IAAI2H,EAAIF,IAC7C,OAAOI,GAAMC,CACf,CAKAC,MAAAA,GACE,OAAO,IAAIlC,EAAMM,KAAKL,GAAIvI,EAAGkD,IAAI0F,KAAKJ,IAAKI,KAAKH,GAClD,CAMAgC,MAAAA,GACE,MAAM,EAAErQ,EAAC,EAAEqE,GAAM6H,EACXoE,EAAK1K,EAAGyC,IAAIhE,EAAGuC,IACbuH,GAAIyB,EAAIxB,GAAIyB,EAAIxB,GAAIyB,GAAOtB,KACnC,IAAI+B,EAAK3K,EAAGoD,KAAMwH,EAAK5K,EAAGoD,KAAMyH,EAAK7K,EAAGoD,KACpC0H,EAAK9K,EAAGyC,IAAIuH,EAAIA,GAChBe,EAAK/K,EAAGyC,IAAIwH,EAAIA,GAChB5G,EAAKrD,EAAGyC,IAAIyH,EAAIA,GAChBc,EAAKhL,EAAGyC,IAAIuH,EAAIC,GA4BpB,OA3BAe,EAAKhL,EAAG0H,IAAIsD,EAAIA,GAChBH,EAAK7K,EAAGyC,IAAIuH,EAAIE,GAChBW,EAAK7K,EAAG0H,IAAImD,EAAIA,GAChBF,EAAK3K,EAAGyC,IAAIrI,EAAGyQ,GACfD,EAAK5K,EAAGyC,IAAIiI,EAAIrH,GAChBuH,EAAK5K,EAAG0H,IAAIiD,EAAIC,GAChBD,EAAK3K,EAAG2C,IAAIoI,EAAIH,GAChBA,EAAK5K,EAAG0H,IAAIqD,EAAIH,GAChBA,EAAK5K,EAAGyC,IAAIkI,EAAIC,GAChBD,EAAK3K,EAAGyC,IAAIuI,EAAIL,GAChBE,EAAK7K,EAAGyC,IAAIiI,EAAIG,GAChBxH,EAAKrD,EAAGyC,IAAIrI,EAAGiJ,GACf2H,EAAKhL,EAAG2C,IAAImI,EAAIzH,GAChB2H,EAAKhL,EAAGyC,IAAIrI,EAAG4Q,GACfA,EAAKhL,EAAG0H,IAAIsD,EAAIH,GAChBA,EAAK7K,EAAG0H,IAAIoD,EAAIA,GAChBA,EAAK9K,EAAG0H,IAAImD,EAAIC,GAChBA,EAAK9K,EAAG0H,IAAIoD,EAAIzH,GAChByH,EAAK9K,EAAGyC,IAAIqI,EAAIE,GAChBJ,EAAK5K,EAAG0H,IAAIkD,EAAIE,GAChBzH,EAAKrD,EAAGyC,IAAIwH,EAAIC,GAChB7G,EAAKrD,EAAG0H,IAAIrE,EAAIA,GAChByH,EAAK9K,EAAGyC,IAAIY,EAAI2H,GAChBL,EAAK3K,EAAG2C,IAAIgI,EAAIG,GAChBD,EAAK7K,EAAGyC,IAAIY,EAAI0H,GAChBF,EAAK7K,EAAG0H,IAAImD,EAAIA,GAChBA,EAAK7K,EAAG0H,IAAImD,EAAIA,GACT,IAAIvC,EAAMqC,EAAIC,EAAIC,EAC3B,CAMAnD,GAAAA,CAAIW,GACFD,EAAeC,GACf,MAAQE,GAAIyB,EAAIxB,GAAIyB,EAAIxB,GAAIyB,GAAOtB,MAC3BL,GAAI4B,EAAI3B,GAAI4B,EAAI3B,GAAI4B,GAAOhC,EACnC,IAAIsC,EAAK3K,EAAGoD,KAAMwH,EAAK5K,EAAGoD,KAAMyH,EAAK7K,EAAGoD,KACxC,MAAMhJ,EAAIkM,EAAMlM,EACVsQ,EAAK1K,EAAGyC,IAAI6D,EAAM7H,EAAGuC,GAC3B,IAAI8J,EAAK9K,EAAGyC,IAAIuH,EAAIG,GAChBY,EAAK/K,EAAGyC,IAAIwH,EAAIG,GAChB/G,EAAKrD,EAAGyC,IAAIyH,EAAIG,GAChBW,EAAKhL,EAAG0H,IAAIsC,EAAIC,GAChBgB,EAAKjL,EAAG0H,IAAIyC,EAAIC,GACpBY,EAAKhL,EAAGyC,IAAIuI,EAAIC,GAChBA,EAAKjL,EAAG0H,IAAIoD,EAAIC,GAChBC,EAAKhL,EAAG2C,IAAIqI,EAAIC,GAChBA,EAAKjL,EAAG0H,IAAIsC,EAAIE,GAChB,IAAIgB,EAAKlL,EAAG0H,IAAIyC,EAAIE,GA+BpB,OA9BAY,EAAKjL,EAAGyC,IAAIwI,EAAIC,GAChBA,EAAKlL,EAAG0H,IAAIoD,EAAIzH,GAChB4H,EAAKjL,EAAG2C,IAAIsI,EAAIC,GAChBA,EAAKlL,EAAG0H,IAAIuC,EAAIC,GAChBS,EAAK3K,EAAG0H,IAAI0C,EAAIC,GAChBa,EAAKlL,EAAGyC,IAAIyI,EAAIP,GAChBA,EAAK3K,EAAG0H,IAAIqD,EAAI1H,GAChB6H,EAAKlL,EAAG2C,IAAIuI,EAAIP,GAChBE,EAAK7K,EAAGyC,IAAIrI,EAAG6Q,GACfN,EAAK3K,EAAGyC,IAAIiI,EAAIrH,GAChBwH,EAAK7K,EAAG0H,IAAIiD,EAAIE,GAChBF,EAAK3K,EAAG2C,IAAIoI,EAAIF,GAChBA,EAAK7K,EAAG0H,IAAIqD,EAAIF,GAChBD,EAAK5K,EAAGyC,IAAIkI,EAAIE,GAChBE,EAAK/K,EAAG0H,IAAIoD,EAAIA,GAChBC,EAAK/K,EAAG0H,IAAIqD,EAAID,GAChBzH,EAAKrD,EAAGyC,IAAIrI,EAAGiJ,GACf4H,EAAKjL,EAAGyC,IAAIiI,EAAIO,GAChBF,EAAK/K,EAAG0H,IAAIqD,EAAI1H,GAChBA,EAAKrD,EAAG2C,IAAImI,EAAIzH,GAChBA,EAAKrD,EAAGyC,IAAIrI,EAAGiJ,GACf4H,EAAKjL,EAAG0H,IAAIuD,EAAI5H,GAChByH,EAAK9K,EAAGyC,IAAIsI,EAAIE,GAChBL,EAAK5K,EAAG0H,IAAIkD,EAAIE,GAChBA,EAAK9K,EAAGyC,IAAIyI,EAAID,GAChBN,EAAK3K,EAAGyC,IAAIuI,EAAIL,GAChBA,EAAK3K,EAAG2C,IAAIgI,EAAIG,GAChBA,EAAK9K,EAAGyC,IAAIuI,EAAID,GAChBF,EAAK7K,EAAGyC,IAAIyI,EAAIL,GAChBA,EAAK7K,EAAG0H,IAAImD,EAAIC,GACT,IAAIxC,EAAMqC,EAAIC,EAAIC,EAC3B,CAEAM,QAAAA,CAAS9C,GACP,OAAOO,KAAKlB,IAAIW,EAAMmC,SACxB,CAEQ7B,GAAAA,GACN,OAAOC,KAAKmB,OAAOzB,EAAMlF,KAC3B,CACQgI,IAAAA,CAAKvO,GACX,OAAOwO,EAAKC,WAAW1C,KAAMV,EAAkBrL,GAAI0O,IACjD,MAAMxC,EAAQ/I,EAAGgJ,YAAYuC,EAAKjH,KAAKQ,GAAMA,EAAE2D,MAC/C,OAAO8C,EAAKjH,KAAI,CAACQ,EAAGjK,IAAMiK,EAAEuC,SAAS0B,EAAMlO,MAAKyJ,IAAIgE,EAAMI,WAAW,GAEzE,CAOA8C,cAAAA,CAAe3O,GACb,MAAM4O,EAAInD,EAAMlF,KAChB,GAAIvG,IAAMkE,EAAK,OAAO0K,EAEtB,GADA7D,EAAS/K,GACLA,IAAM5C,EAAK,OAAO2O,KACtB,MAAM,KAAE9B,GAASR,EACjB,IAAKQ,EAAM,OAAOuE,EAAKK,aAAa9C,KAAM/L,GAG1C,IAAI,MAAE8O,EAAK,GAAEC,EAAE,MAAEC,EAAK,GAAEC,GAAOhF,EAAKE,YAAYnK,GAC5CkP,EAAMN,EACNO,EAAMP,EACNjG,EAAWoD,KACf,KAAOgD,EAAK7K,GAAO+K,EAAK/K,GAClB6K,EAAK3R,IAAK8R,EAAMA,EAAIrE,IAAIlC,IACxBsG,EAAK7R,IAAK+R,EAAMA,EAAItE,IAAIlC,IAC5BA,EAAIA,EAAEiF,SACNmB,IAAO3R,EACP6R,IAAO7R,EAKT,OAHI0R,IAAOI,EAAMA,EAAIvB,UACjBqB,IAAOG,EAAMA,EAAIxB,UACrBwB,EAAM,IAAI1D,EAAMtI,EAAGyC,IAAIuJ,EAAIzD,GAAIzB,EAAKC,MAAOiF,EAAIxD,GAAIwD,EAAIvD,IAChDsD,EAAIrE,IAAIsE,EACjB,CAWA1C,QAAAA,CAAS2C,GACPrE,EAASqE,GACT,IACI9E,EAAc+E,EADdrP,EAAIoP,EAER,MAAM,KAAEnF,GAASR,EACjB,GAAIQ,EAAM,CACR,MAAM,MAAE6E,EAAK,GAAEC,EAAE,MAAEC,EAAK,GAAEC,GAAOhF,EAAKE,YAAYnK,GAClD,IAAMiI,EAAGiH,EAAKI,EAAGC,GAAQxD,KAAKwC,KAAKQ,IAC7B9G,EAAGkH,EAAKG,EAAGE,GAAQzD,KAAKwC,KAAKU,GACnCC,EAAMV,EAAKiB,gBAAgBX,EAAOI,GAClCC,EAAMX,EAAKiB,gBAAgBT,EAAOG,GAClCA,EAAM,IAAI1D,EAAMtI,EAAGyC,IAAIuJ,EAAIzD,GAAIzB,EAAKC,MAAOiF,EAAIxD,GAAIwD,EAAIvD,IACvDtB,EAAQ4E,EAAIrE,IAAIsE,GAChBE,EAAOE,EAAI1E,IAAI2E,EACjB,KAAO,CACL,MAAM,EAAEvH,EAAC,EAAEqH,GAAMvD,KAAKwC,KAAKvO,GAC3BsK,EAAQrC,EACRoH,EAAOC,CACT,CAEA,OAAO7D,EAAMO,WAAW,CAAC1B,EAAO+E,IAAO,EACzC,CAQAK,oBAAAA,CAAqBzJ,EAAU1I,EAAWqE,GACxC,MAAM+N,EAAIlE,EAAMe,KACV5G,EAAMA,CACVN,EACA/H,IACIA,IAAM2G,GAAO3G,IAAMH,GAAQkI,EAAE4H,OAAOyC,GAA2BrK,EAAEmH,SAASlP,GAAjC+H,EAAEqJ,eAAepR,GAC1DkD,EAAMmF,EAAImG,KAAMxO,GAAGsN,IAAIjF,EAAIK,EAAGrE,IACpC,OAAOnB,EAAIqL,WAAQnM,EAAYc,CACjC,CAKA+J,QAAAA,CAASoF,GACP,MAAQlE,GAAI3G,EAAG4G,GAAI3G,EAAG4G,GAAIiE,GAAM9D,KAC1BD,EAAMC,KAAKD,MAGP,MAAN8D,IAAYA,EAAK9D,EAAM3I,EAAG4C,IAAM5C,EAAG2M,IAAID,IAC3C,MAAME,EAAK5M,EAAGyC,IAAIb,EAAG6K,GACfI,EAAK7M,EAAGyC,IAAIZ,EAAG4K,GACfK,EAAK9M,EAAGyC,IAAIiK,EAAGD,GACrB,GAAI9D,EAAK,MAAO,CAAE/G,EAAG5B,EAAGoD,KAAMvB,EAAG7B,EAAGoD,MACpC,IAAKpD,EAAGsC,IAAIwK,EAAI9M,EAAG4C,KAAM,MAAM,IAAI1H,MAAM,oBACzC,MAAO,CAAE0G,EAAGgL,EAAI/K,EAAGgL,EACrB,CACApG,aAAAA,GACE,MAAQlI,EAAGwO,EAAQ,cAAEtG,GAAkBH,EACvC,GAAIyG,IAAa9S,EAAK,OAAO,EAC7B,GAAIwM,EAAe,OAAOA,EAAc6B,EAAOM,MAC/C,MAAM,IAAI1N,MAAM,+DAClB,CACAwL,aAAAA,GACE,MAAQnI,EAAGwO,EAAQ,cAAErG,GAAkBJ,EACvC,OAAIyG,IAAa9S,EAAY2O,KACzBlC,EAAsBA,EAAc4B,EAAOM,MACxCA,KAAK4C,eAAelF,EAAM/H,EACnC,CAEAyO,UAAAA,GAA8B,IAAnBC,IAAY1P,UAAA5C,OAAA,QAAA6B,IAAAe,UAAA,KAAAA,UAAA,GAErB,OADAqL,KAAKM,iBACErC,EAAQyB,EAAOM,KAAMqE,EAC9B,CAEAC,KAAAA,GAAyB,IAAnBD,IAAY1P,UAAA5C,OAAA,QAAA6B,IAAAe,UAAA,KAAAA,UAAA,GAChB,OAAO0H,EAAc2D,KAAKoE,WAAWC,GACvC,EAlVgB3E,EAAAe,KAAO,IAAIf,EAAMhC,EAAM3B,GAAI2B,EAAM1B,GAAI5E,EAAG4C,KACxC0F,EAAAlF,KAAO,IAAIkF,EAAMtI,EAAGoD,KAAMpD,EAAG4C,IAAK5C,EAAGoD,MAmVvD,MAAM+J,EAAQ7G,EAAM5C,WACd2H,ED5jBF,SAAmC+B,EAAwBC,GAC/D,MAAMf,EAAkBA,CAACgB,EAAoBC,KAC3C,MAAMrK,EAAMqK,EAAK/C,SACjB,OAAO8C,EAAYpK,EAAMqK,CAAI,EAEzBlH,EAAQmH,IAGL,CAAEC,QAFO5J,KAAKC,KAAKuJ,EAAOG,GAAK,EAEpBhE,WADC,IAAMgE,EAAI,KAG/B,MAAO,CACLlB,kBAEAZ,YAAAA,CAAagC,EAAQ7Q,GACnB,IAAIiI,EAAIsI,EAAEhK,KACNoC,EAAOkI,EACX,KAAO7Q,EAAIkE,GACLlE,EAAI5C,IAAK6K,EAAIA,EAAE4C,IAAIlC,IACvBA,EAAIA,EAAEiF,SACN5N,IAAM5C,EAER,OAAO6K,CACT,EAYA6I,gBAAAA,CAAiBD,EAAQF,GACvB,MAAM,QAAEC,EAAO,WAAEjE,GAAenD,EAAKmH,GAC/B1E,EAAc,GACpB,IAAIhE,EAAO4I,EACPE,EAAO9I,EACX,IAAK,IAAI+I,EAAS,EAAGA,EAASJ,EAASI,IAAU,CAC/CD,EAAO9I,EACPgE,EAAO7J,KAAK2O,GAEZ,IAAK,IAAI/S,EAAI,EAAGA,EAAI2O,EAAY3O,IAC9B+S,EAAOA,EAAKlG,IAAI5C,GAChBgE,EAAO7J,KAAK2O,GAEd9I,EAAI8I,EAAKnD,QACX,CACA,OAAO3B,CACT,EASAsC,IAAAA,CAAKoC,EAAWM,EAAkBjR,GAGhC,MAAM,QAAE4Q,EAAO,WAAEjE,GAAenD,EAAKmH,GAErC,IAAI1I,EAAIsI,EAAEhK,KACN+I,EAAIiB,EAAE/D,KAEV,MAAM0E,EAAO/T,OAAO,GAAKwT,EAAI,GACvBQ,EAAY,GAAKR,EACjBS,EAAUjU,OAAOwT,GAEvB,IAAK,IAAIK,EAAS,EAAGA,EAASJ,EAASI,IAAU,CAC/C,MAAMK,EAASL,EAASrE,EAExB,IAAI2E,EAAQvO,OAAO/C,EAAIkR,GAGvBlR,IAAMoR,EAIFE,EAAQ3E,IACV2E,GAASH,EACTnR,GAAK5C,GAWP,MAAMmU,EAAUF,EACVG,EAAUH,EAASrK,KAAKyK,IAAIH,GAAS,EACrCI,EAAQV,EAAS,IAAM,EACvBW,EAAQL,EAAQ,EACR,IAAVA,EAEFhC,EAAIA,EAAEzE,IAAI4E,EAAgBiC,EAAOT,EAAYM,KAE7CtJ,EAAIA,EAAE4C,IAAI4E,EAAgBkC,EAAOV,EAAYO,IAEjD,CAMA,MAAO,CAAEvJ,IAAGqH,IACd,EAEAb,UAAAA,CAAWnJ,EAAMsM,EAA6B5R,EAAW6R,GAEvD,MAAMlB,EAAYrL,EAAEsH,cAAgB,EAEpC,IAAI8B,EAAOkD,EAAeE,IAAIxM,GAO9B,OANKoJ,IACHA,EAAO3C,KAAK+E,iBAAiBxL,EAAGqL,GACtB,IAANA,GACFiB,EAAehR,IAAI0E,EAAGuM,EAAUnD,KAG7B3C,KAAKwC,KAAKoC,EAAGjC,EAAM1O,EAC5B,EAEJ,CC6beuO,CAAK9C,EAAOhC,EAAMQ,KAAOjD,KAAKC,KAAKqJ,EAAQ,GAAKA,GAE7D,MAAO,CACL7G,QACAsI,gBAAiBtG,EACjBT,yBACAN,sBACAI,qBAEJ,CA0EM,SAAUkH,EAAYC,GAC1B,MAAMxI,EAnCR,SAAsBlC,GACpB,MAAMiC,EAAOlC,EAAcC,GAc3B,OAbAa,EACEoB,EACA,CACEnG,KAAM,OACN6O,KAAM,WACNC,YAAa,YAEf,CACEC,SAAU,WACVC,cAAe,WACfC,KAAM,YAGHtO,OAAOgE,OAAO,CAAEsK,MAAM,KAAS9I,GACxC,CAmBgB+I,CAAaN,IACrB,GAAE9O,EAAInD,EAAGwS,GAAgB/I,EACzBgJ,EAAgBtP,EAAGyE,MAAQ,EAC3B8K,EAAkB,EAAIvP,EAAGyE,MAAQ,EAKvC,SAAS+K,EAAKpV,GACZ,OAAOgH,EAAQhH,EAAGiV,EACpB,CACA,SAASI,EAAKrV,GACZ,OAAOgH,EAAWhH,EAAGiV,EACvB,CAEA,MACET,gBAAiBtG,EAAK,uBACtBT,EAAsB,oBACtBN,EAAmB,mBACnBI,GACEvB,EAAkB,IACjBE,EACHO,OAAAA,CAAQK,EAAIC,EAAO8F,GACjB,MAAM7S,EAAI+M,EAAME,WACVzF,EAAI5B,EAAG6G,QAAQzM,EAAEwH,GACjB8N,EAAMzK,EACZ,OAAIgI,EACKyC,EAAIrV,WAAWK,KAAK,CAACyM,EAAM0C,WAAa,EAAO,IAAQjI,GAEvD8N,EAAIrV,WAAWK,KAAK,CAAC,IAAQkH,EAAG5B,EAAG6G,QAAQzM,EAAEyH,GAExD,EACA+E,SAAAA,CAAU3L,GACR,MAAM6B,EAAM7B,EAAMN,OACZgV,EAAO1U,EAAM,GACbqM,EAAOrM,EAAMsK,SAAS,GAE5B,GAAIzI,IAAQwS,GAA2B,IAATK,GAA0B,IAATA,EAUxC,IAAI7S,IAAQyS,GAA4B,IAATI,EAAe,CAGnD,MAAO,CAAE/N,EAFC5B,EAAG4G,UAAUU,EAAK/B,SAAS,EAAGvF,EAAGyE,QAE/B5C,EADF7B,EAAG4G,UAAUU,EAAK/B,SAASvF,EAAGyE,MAAO,EAAIzE,EAAGyE,QAExD,CACE,MAAM,IAAIvJ,MAAM,mBAADG,OACMyB,EAAG,2BAAAzB,OAA0BiU,EAAa,yBAAAjU,OAAwBkU,EAAe,uBAExG,CAlB+D,CAC7D,MAAM3N,EAAIqD,EAAmBqC,GAC7B,KAjCGvG,GADoBQ,EAkCEK,IAjCTL,EAAMvB,EAAGuE,OAiCI,MAAM,IAAIrJ,MAAM,yBAC7C,MAAM0U,EAAKrI,EAAoB3F,GAC/B,IAAIC,EAAI7B,EAAG6P,KAAKD,GAKhB,OAFiC,KAAP,EAAPD,OAFH9N,EAAI5H,KAASA,KAGH4H,EAAI7B,EAAGkD,IAAIrB,IAC9B,CAAED,IAAGC,IACd,CA1CJ,IAA6BN,CAmD3B,IAEIuO,EAAiBvO,GACrB0D,EAAcA,EAAmB1D,EAAK+E,EAAM1C,cAE9C,SAASmM,EAAsBpO,GAE7B,OAAOA,EADM0N,GAAepV,CAE9B,CAMA,MAAM+V,EAASA,CAACvR,EAAe/D,EAAcuV,IAAehL,EAAmBxG,EAAEO,MAAMtE,EAAMuV,IAK7F,MAAMC,EACJ5V,WAAAA,CACW0H,EACA4D,EACAuK,GAFA,KAAAnO,EAAAA,EACA,KAAA4D,EAAAA,EACA,KAAAuK,SAAAA,EAETvH,KAAKM,gBACP,CAGA,kBAAOkH,CAAYjV,GACjB,MAAMsK,EAAIa,EAAM1C,YAEhB,OADAzI,EAAM6B,EAAY,mBAAoB7B,EAAS,EAAJsK,GACpC,IAAIyK,EAAUF,EAAO7U,EAAK,EAAGsK,GAAIuK,EAAO7U,EAAKsK,EAAG,EAAIA,GAC7D,CAIA,cAAO4K,CAAQlV,GACb,MAAM,EAAE6G,EAAC,EAAE4D,GAAMV,EAAIQ,MAAM1I,EAAY,MAAO7B,IAC9C,OAAO,IAAI+U,EAAUlO,EAAG4D,EAC1B,CAEAsD,cAAAA,GAEE,IAAKvB,EAAmBiB,KAAK5G,GAAI,MAAM,IAAI9G,MAAM,6BACjD,IAAKyM,EAAmBiB,KAAKhD,GAAI,MAAM,IAAI1K,MAAM,4BACnD,CAEAoV,cAAAA,CAAeH,GACb,OAAO,IAAID,EAAUtH,KAAK5G,EAAG4G,KAAKhD,EAAGuK,EACvC,CAEAI,gBAAAA,CAAiBC,GACf,MAAM,EAAExO,EAAC,EAAE4D,EAAGuK,SAAUM,GAAQ7H,KAC1BrK,EAAI2Q,EAAclS,EAAY,UAAWwT,IAC/C,GAAW,MAAPC,IAAgB,CAAC,EAAG,EAAG,EAAG,GAAGzI,SAASyI,GAAM,MAAM,IAAIvV,MAAM,uBAChE,MAAMwV,EAAe,IAARD,GAAqB,IAARA,EAAYzO,EAAIsE,EAAMzJ,EAAImF,EACpD,GAAI0O,GAAQ1Q,EAAGuE,MAAO,MAAM,IAAIrJ,MAAM,8BACtC,MAAMyV,EAAuB,KAAP,EAANF,GAAiB,KAAO,KAClCG,EAAItI,EAAMW,QAAQ0H,EAASb,EAAcY,IACzCG,EAAKpB,EAAKiB,GACVI,EAAKtB,GAAMjR,EAAIsS,GACfE,EAAKvB,EAAK5J,EAAIiL,GACd/N,EAAIwF,EAAMe,KAAKkD,qBAAqBqE,EAAGE,EAAIC,GACjD,IAAKjO,EAAG,MAAM,IAAI5H,MAAM,qBAExB,OADA4H,EAAEoG,iBACKpG,CACT,CAGAkO,QAAAA,GACE,OAAOjB,EAAsBnH,KAAKhD,EACpC,CAEAqL,UAAAA,GACE,OAAOrI,KAAKoI,WAAa,IAAId,EAAUtH,KAAK5G,EAAGwN,GAAM5G,KAAKhD,GAAIgD,KAAKuH,UAAYvH,IACjF,CAGAsI,aAAAA,GACE,OAAOjM,EAAc2D,KAAKuI,WAC5B,CACAA,QAAAA,GACE,OAAOjM,EAAIY,WAAW,CAAE9D,EAAG4G,KAAK5G,EAAG4D,EAAGgD,KAAKhD,GAC7C,CAGAwL,iBAAAA,GACE,OAAOnM,EAAc2D,KAAKyI,eAC5B,CACAA,YAAAA,GACE,OAAOvB,EAAclH,KAAK5G,GAAK8N,EAAclH,KAAKhD,EACpD,EAIF,MAAM0L,EAAQ,CACZC,iBAAAA,CAAkBnI,GAChB,IAEE,OADAvB,EAAuBuB,IAChB,CACT,CAAE,MAAOnB,GACP,OAAO,CACT,CACF,EACAJ,uBAAwBA,EAMxB2J,iBAAkBA,KAChB,MAAM7W,EAASyG,EAAqBkF,EAAMzJ,GAC1C,OFvYA,SAAyBiL,EAAiB9D,GAAgC,IAAZyN,EAAIlU,UAAA5C,OAAA,QAAA6B,IAAAe,UAAA,IAAAA,UAAA,GACtE,MAAMT,EAAMgL,EAAInN,OACV+W,EAAW3N,EAAoBC,GAC/B2N,EAASzN,EAAiBF,GAEhC,GAAIlH,EAAM,IAAMA,EAAM6U,GAAU7U,EAAM,KACpC,MAAM,IAAI5B,MAAM,YAADG,OAAasW,EAAM,8BAAAtW,OAA6ByB,IACjE,MAEM8U,EAAUxQ,EAFJqQ,EAAOhV,EAAgBqL,GAAOpL,EAAgBoL,GAEjC9D,EAAa/J,GAAOA,EAC7C,OAAOwX,EAAO1U,EAAgB6U,EAASF,GAAY9U,EAAgBgV,EAASF,EAC9E,CE4XatQ,CAAmBkF,EAAM0I,YAAYrU,GAAS2L,EAAMzJ,EAAE,EAW/DgV,UAAAA,GAA6C,IAAlCrI,EAAUjM,UAAA5C,OAAA,QAAA6B,IAAAe,UAAA,GAAAA,UAAA,GAAG,EAAG4J,EAAK5J,UAAA5C,OAAA,QAAA6B,IAAAe,UAAA,GAAAA,UAAA,GAAG+K,EAAMe,KAGvC,OAFAlC,EAAMoC,eAAeC,GACrBrC,EAAMmC,SAAStP,OAAO,IACfmN,CACT,GAgBF,SAAS2K,EAAUvE,GACjB,MAAMzP,EAAMmH,EAAWsI,GACjBwE,EAAsB,kBAATxE,EACbzQ,GAAOgB,GAAOiU,IAASxE,EAAa5S,OAC1C,OAAImD,EAAYhB,IAAQwS,GAAiBxS,IAAQyS,EAC7CwC,EAAYjV,IAAQ,EAAIwS,GAAiBxS,IAAQ,EAAIyS,EACrDhC,aAAgBjF,CAEtB,CAuBA,MAAM2G,EACJ3I,EAAM2I,UACN,SAAUhU,GAGR,MAAMsG,EAAM0D,EAAmBhK,GACzB+W,EAAuB,EAAf/W,EAAMN,OAAa2L,EAAM5C,WACvC,OAAOsO,EAAQ,EAAIzQ,GAAOvH,OAAOgY,GAASzQ,CAC5C,EACI2N,EACJ5I,EAAM4I,eACN,SAAUjU,GACR,OAAOuU,EAAKP,EAAShU,GACvB,EAEIgX,EAAahN,EAAWqB,EAAM5C,YAIpC,SAASwO,EAAW3Q,GAClB,GAAmB,kBAARA,EAAkB,MAAM,IAAIrG,MAAM,mBAC7C,KAAM6F,GAAOQ,GAAOA,EAAM0Q,GACxB,MAAM,IAAI/W,MAAM,uBAADG,OAAwBiL,EAAM5C,aAE/C,OAAOuB,EAAmB1D,EAAK+E,EAAM1C,YACvC,CAOA,SAASuO,EAAQ3B,EAAcpH,GAA0C,IAArB/C,EAAI9I,UAAA5C,OAAA,QAAA6B,IAAAe,UAAA,GAAAA,UAAA,GAAG6U,EACzD,GAAI,CAAC,YAAa,aAAaC,MAAMjU,GAAMA,KAAKiI,IAC9C,MAAM,IAAInL,MAAM,uCAClB,MAAM,KAAEgF,EAAI,YAAE8O,GAAgB1I,EAC9B,IAAI,KAAE6I,EAAI,QAAEmD,EAASC,aAAcC,GAAQnM,EAC/B,MAAR8I,IAAcA,GAAO,GACzBqB,EAAUxT,EAAY,UAAWwT,GAC7B8B,IAAS9B,EAAUxT,EAAY,oBAAqBkD,EAAKsQ,KAK7D,MAAMiC,EAAQvD,EAAcsB,GACtBhL,EAAIqC,EAAuBuB,GAC3BsJ,EAAW,CAACR,EAAW1M,GAAI0M,EAAWO,IAE5C,GAAW,MAAPD,EAAa,CAEf,MAAMpV,GAAY,IAARoV,EAAexD,EAAYhP,EAAGyE,OAAS+N,EACjDE,EAASzT,KAAKjC,EAAY,eAAgBI,GAC5C,CACA,MAAMwB,EAAOqG,KAAkByN,GACzBzQ,EAAIwQ,EAuBV,MAAO,CAAE7T,OAAM+T,MArBf,SAAeC,GAEb,MAAMxU,EAAI6Q,EAAS2D,GACnB,IAAKjL,EAAmBvJ,GAAI,OAC5B,MAAMyU,EAAKpD,EAAKrR,GACV2D,EAAIuG,EAAMe,KAAKC,SAASlL,GAAGiJ,WAC3BrF,EAAIwN,EAAKzN,EAAEH,GACjB,GAAII,IAAMjB,EAAK,OAIf,MAAM6E,EAAI4J,EAAKqD,EAAKrD,EAAKvN,EAAID,EAAIwD,IACjC,GAAII,IAAM7E,EAAK,OACf,IAAIoP,GAAYpO,EAAEH,IAAMI,EAAI,EAAI,GAAKpC,OAAOmC,EAAEF,EAAI5H,GAC9C6Y,EAAQlN,EAKZ,OAJIuJ,GAAQY,EAAsBnK,KAChCkN,EA7ON,SAAoBlN,GAClB,OAAOmK,EAAsBnK,GAAK4J,GAAM5J,GAAKA,CAC/C,CA2OcqL,CAAWrL,GACnBuK,GAAY,GAEP,IAAID,EAAUlO,EAAG8Q,EAAO3C,EACjC,EAEF,CACA,MAAMiC,EAA2B,CAAEjD,KAAM7I,EAAM6I,KAAMmD,SAAS,GACxDS,EAA0B,CAAE5D,KAAM7I,EAAM6I,KAAMmD,SAAS,GAuF7D,OAhEAhK,EAAMe,KAAKE,eAAe,GAgEnB,CACLjD,QACA0M,aA/MF,SAAsB5J,GAAwC,IAAnB6D,IAAY1P,UAAA5C,OAAA,QAAA6B,IAAAe,UAAA,KAAAA,UAAA,GACrD,OAAO+K,EAAMa,eAAeC,GAAY4D,WAAWC,EACrD,EA8MEgG,gBArLF,SAAyBC,EAAmBC,GAAiC,IAAnBlG,IAAY1P,UAAA5C,OAAA,QAAA6B,IAAAe,UAAA,KAAAA,UAAA,GACpE,GAAIuU,EAAUoB,GAAW,MAAM,IAAIhY,MAAM,iCACzC,IAAK4W,EAAUqB,GAAU,MAAM,IAAIjY,MAAM,iCAEzC,OADUoN,EAAMW,QAAQkK,GACf7J,SAASzB,EAAuBqL,IAAWlG,WAAWC,EACjE,EAiLEmG,KA5EF,SAAc5C,EAAc6C,GAAuC,IAArBhN,EAAI9I,UAAA5C,OAAA,QAAA6B,IAAAe,UAAA,GAAAA,UAAA,GAAG6U,EACnD,MAAM,KAAExT,EAAI,MAAE+T,GAAUR,EAAQ3B,EAAS6C,EAAShN,GAC5CiN,EAAIhN,EAEV,OADarB,EAAsCqO,EAAEpT,KAAKC,UAAWmT,EAAE1P,YAAa0P,EAAEvE,KAC/EwE,CAAK3U,EAAM+T,EACpB,EAwEEa,OArDF,SACEC,EACAjD,EACAkD,GACqB,IAAAC,EAAA,IAArBtN,EAAI9I,UAAA5C,OAAA,QAAA6B,IAAAe,UAAA,GAAAA,UAAA,GAAGwV,EAEP,MAAMa,EAAKH,EAGX,GAFAjD,EAAUxT,EAAY,UAAWwT,GACjCkD,EAAY1W,EAAY,YAAa0W,GACjC,WAAYrN,EAAM,MAAM,IAAInL,MAAM,sCACtC,MAAM,KAAEiU,EAAI,QAAEmD,GAAYjM,EAE1B,IAAIwN,EACA1R,EACJ,IACE,GAAkB,kBAAPyR,GAAmB3O,EAAW2O,GAGvC,IACEC,EAAO3D,EAAUG,QAAQuD,EAC3B,CAAE,MAAOE,GACP,KAAMA,aAAoB5O,EAAIC,KAAM,MAAM2O,EAC1CD,EAAO3D,EAAUE,YAAYwD,EAC/B,KACK,IAAkB,kBAAPA,GAAmC,kBAATA,EAAG5R,GAAkC,kBAAT4R,EAAGhO,EAIzE,MAAM,IAAI1K,MAAM,SAJyE,CACzF,MAAM,EAAE8G,EAAC,EAAE4D,GAAMgO,EACjBC,EAAO,IAAI3D,EAAUlO,EAAG4D,EAC1B,CAEA,CACAzD,EAAImG,EAAMW,QAAQyK,EACpB,CAAE,MAAOzL,GACP,GAAiC,UAA5BA,EAAgB8L,QACnB,MAAM,IAAI7Y,MAAM,kEAClB,OAAO,CACT,CACA,GAAIiU,GAAQ0E,EAAK7C,WAAY,OAAO,EAChCsB,IAAS9B,EAAUlK,EAAMpG,KAAKsQ,IAClC,MAAM,EAAExO,EAAC,EAAE4D,GAAMiO,EACXtV,EAAI2Q,EAAcsB,GAClBwD,EAAKvE,EAAK7J,GACVkL,EAAKtB,EAAKjR,EAAIyV,GACdjD,EAAKvB,EAAKxN,EAAIgS,GACdpD,EAA8C,QAA7C+C,EAAGrL,EAAMe,KAAKkD,qBAAqBpK,EAAG2O,EAAIC,UAAG,IAAA4C,OAAA,EAA1CA,EAA4CtM,WACtD,QAAKuJ,GACKpB,EAAKoB,EAAEhP,KACJI,CACf,EAOE4M,gBAAiBtG,EACjB4H,YACAoB,QAEJ,CCvkCM,SAAU2C,EAAQ/T,GACtB,MAAO,CACLA,OACA6O,KAAM,SAACjH,GAAe,QAAAtJ,EAAAjB,UAAA5C,OAAKuZ,EAAkB,IAAAzZ,MAAA+D,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAlBwV,EAAkBxV,EAAA,GAAAnB,UAAAmB,GAAA,OAAKqQ,EAAAA,EAAAA,GAAK7O,EAAM4H,GAAKzK,EAAAA,EAAAA,OAAe6W,GAAM,EACvFlF,YAAWA,EAAAA,GAEf,gBCHA,MAAMhP,GJgVA,SACJuE,EACA4P,GAEmC,IADnC1C,EAAIlU,UAAA5C,OAAA,QAAA6B,IAAAe,UAAA,IAAAA,UAAA,GACJ6W,EAAA7W,UAAA5C,OAAA,QAAA6B,IAAAe,UAAA,GAAAA,UAAA,GAAiC,CAAC,EAElC,GAAIgH,GAASxD,EAAK,MAAM,IAAI7F,MAAM,iCAADG,OAAkCkJ,IACnE,MAAQb,WAAYgB,EAAMd,YAAaa,GAAUhB,EAAQc,EAAO4P,GAChE,GAAI1P,EAAQ,KAAM,MAAM,IAAIvJ,MAAM,mDAClC,MAAMmZ,EAAQnS,EAAOqC,GACf4H,EAAuBtL,OAAOgE,OAAO,CACzCN,QACAG,OACAD,QACAD,KAAM9G,EAAQgH,GACdtB,KAAMrC,EACN6B,IAAK3I,EACLqa,OAAS/S,GAAQH,EAAIG,EAAKgD,GAC1BtE,QAAUsB,IACR,GAAmB,kBAARA,EACT,MAAM,IAAIrG,MAAM,+CAADG,cAAuDkG,IACxE,OAAOR,GAAOQ,GAAOA,EAAMgD,CAAK,EAElCoE,IAAMpH,GAAQA,IAAQR,EACtB+I,MAAQvI,IAASA,EAAMtH,KAASA,EAChCiJ,IAAM3B,GAAQH,GAAKG,EAAKgD,GACxBjC,IAAKA,CAACiS,EAAKC,IAAQD,IAAQC,EAE3BjS,IAAMhB,GAAQH,EAAIG,EAAMA,EAAKgD,GAC7BmD,IAAKA,CAAC6M,EAAKC,IAAQpT,EAAImT,EAAMC,EAAKjQ,GAClC5B,IAAKA,CAAC4R,EAAKC,IAAQpT,EAAImT,EAAMC,EAAKjQ,GAClC9B,IAAKA,CAAC8R,EAAKC,IAAQpT,EAAImT,EAAMC,EAAKjQ,GAClCjD,IAAKA,CAACC,EAAKC,IAzGT,SAAmB2K,EAAc5K,EAAQC,GAG7C,GAAIA,EAAQT,EAAK,MAAM,IAAI7F,MAAM,sBACjC,GAAIsG,IAAUT,EAAK,OAAOoL,EAAEvJ,IAC5B,GAAIpB,IAAUvH,EAAK,OAAOsH,EAC1B,IAAIuD,EAAIqH,EAAEvJ,IACN4C,EAAIjE,EACR,KAAOC,EAAQT,GACTS,EAAQvH,IAAK6K,EAAIqH,EAAE1J,IAAIqC,EAAGU,IAC9BA,EAAI2G,EAAE5J,IAAIiD,GACVhE,IAAUvH,EAEZ,OAAO6K,CACT,CA2FyB2P,CAAMtI,EAAG5K,EAAKC,GACnCkT,IAAKA,CAACH,EAAKC,IAAQpT,EAAImT,EAAM7S,EAAO8S,EAAKjQ,GAAQA,GAGjDoQ,KAAOpT,GAAQA,EAAMA,EACrBqT,KAAMA,CAACL,EAAKC,IAAQD,EAAMC,EAC1BK,KAAMA,CAACN,EAAKC,IAAQD,EAAMC,EAC1BM,KAAMA,CAACP,EAAKC,IAAQD,EAAMC,EAE1B7H,IAAMpL,GAAQG,EAAOH,EAAKgD,GAC1BsL,KAAMuE,EAAMvE,MAAQ,CAAEhT,GAAMwX,EAAMlI,EAAGtP,IACrCmM,YAAc+L,GAhGZ,SAA2B5I,EAAc6I,GAC7C,MAAMC,EAAM,IAAIxa,MAAMua,EAAKra,QAErBua,EAAiBF,EAAK3Q,QAAO,CAAC8Q,EAAK5T,EAAK1G,IACxCsR,EAAExD,IAAIpH,GAAa4T,GACvBF,EAAIpa,GAAKsa,EACFhJ,EAAE1J,IAAI0S,EAAK5T,KACjB4K,EAAEvJ,KAECwS,EAAWjJ,EAAEQ,IAAIuI,GAOvB,OALAF,EAAKK,aAAY,CAACF,EAAK5T,EAAK1G,IACtBsR,EAAExD,IAAIpH,GAAa4T,GACvBF,EAAIpa,GAAKsR,EAAE1J,IAAI0S,EAAKF,EAAIpa,IACjBsR,EAAE1J,IAAI0S,EAAK5T,KACjB6T,GACIH,CACT,CA+E0BK,CAAcnJ,EAAG4I,GAGvCQ,KAAMA,CAACnb,EAAGqE,EAAG2O,IAAOA,EAAI3O,EAAIrE,EAC5ByM,QAAUtF,GAASkQ,EAAO1U,EAAgBwE,EAAKkD,GAAS7H,EAAgB2E,EAAKkD,GAC7EmC,UAAY3L,IACV,GAAIA,EAAMN,SAAW8J,EACnB,MAAM,IAAIvJ,MAAM,0BAADG,OAA2BoJ,EAAK,UAAApJ,OAASJ,EAAMN,SAChE,OAAO8W,EAAO/U,EAAgBzB,GAASwB,EAAgBxB,EAAM,IAGjE,OAAO4F,OAAOgE,OAAOsH,EACvB,CIvYWqJ,CAAMxb,OAAO,uEAClByb,GAAUzV,GAAGsU,OAAOta,OAAO,OAC3B0b,GAAU1b,OAAO,sEAGV2b,GDCP,SAAsB7G,EAAoB8G,GAC9C,MAAMtB,EAAUpU,GAAgB2O,EAAY,IAAKC,KAAamF,EAAQ/T,KACtE,OAAOW,OAAOgE,OAAO,IAAKyP,EAAOsB,GAAUtB,UAC7C,CCJoBuB,CAAY,CAC9Bzb,EAAGqb,GACHhX,EAAGiX,GACH1V,MAEAnD,EAAG7C,OAAO,sEAEV2K,GAAI3K,OAAO,sEACX4K,GAAI5K,OAAO,sEACXuE,EAAGvE,OAAO,GACVmV,MAAM,GACI2G,GAAAA,GCtBNC,GAAI,CACN,WAAgB,YAAgB,YAAgB,UAChD,UAAgB,YAAgB,YAAgB,YAChD,UAAgB,UAAgB,UAAgB,WAChD,YAAgB,YAAgB,YAAgB,YAChD,WAAgB,UAAgB,UAAgB,UAChD,UAAgB,WAAgB,WAAgB,YAChD,YAAgB,YAAgB,YAAgB,YAChD,WAAgB,UAAgB,UAAgB,UAChD,UAAgB,UAAgB,WAAgB,WAChD,WAAgB,YAAgB,YAAgB,YAChD,YAAgB,YAAgB,YAAgB,WAChD,WAAgB,WAAgB,UAAgB,UAChD,UAAgB,UAAgB,UAAgB,UAChD,UAAgB,WAAgB,WAAgB,WAChD,WAAgB,YAAgB,YAAgB,YAChD,YAAgB,YAAgB,YAAgB,WAE9CC,GAAa,CACfF,OAAQ,GAQL,MAAMG,GACT3b,WAAAA,GAEIsO,KAAKsN,EAAI,WACTtN,KAAKuN,GAAI,WACTvN,KAAK0K,EAAI,WACT1K,KAAKwN,GAAI,WACTxN,KAAKtD,EAAI,WACTsD,KAAKyN,GAAI,WACTzN,KAAK4D,EAAI,UACT5D,KAAK0N,EAAI,WACT1N,KAAK2N,MAAQ,EACb3N,KAAK4N,IAAM,IACNC,IAAgBC,IAAgB,OACjCD,GAAe,IAAIE,YAAY,KAC/BD,GAAe,GAEnB9N,KAAKgO,MAAQ,IAAIvc,WAAWoc,GAAcC,GAAc,IACxD9N,KAAKiO,MAAQ,IAAIC,WAAWL,GAAcC,GAAc,IACxDA,IAAgB,EACpB,CACAK,MAAAA,CAAOnZ,GAEH,GAAI,kBAAoBA,EACpB,OAAOgL,KAAKoO,MAAMpZ,GAGtB,GAAY,MAARA,EACA,MAAM,IAAIqZ,UAAU,wBAA0BrZ,GAElD,MAAMsZ,EAAatZ,EAAKsZ,WAClBvc,EAASiD,EAAKuZ,WACpB,IAAIC,EAAUzc,EAAS,GAAyB,EAC5CuT,EAAS,EAEb,GAAIkJ,KAAyB,EAAbF,MAAqBtO,KAAK2N,MAAQ,IAAwB,CACtE,MAAMc,EAAQ,IAAIP,WAAWlZ,EAAK0Z,OAAQJ,EAAqB,GAATE,GACtD,KAAOA,KACHxO,KAAK2O,OAAOF,EAAOnJ,GAAU,GAC7BA,GAAU,GAEdtF,KAAK2N,OAASrI,CAClB,CAGA,GAA0B,IADAtQ,EAAK4Z,mBACA5Z,EAAK0Z,OAAQ,CACxC,MAAMG,EAAO,IAAIpd,WAAWuD,EAAK0Z,OAAQJ,EAAahJ,EAAQvT,EAASuT,GACvE,OAAOtF,KAAK8O,OAAOD,EACvB,CAEA,OAAIvJ,IAAWvT,EACJiO,KAEJA,KAAK8O,OAAO9Z,EAAMsQ,EAC7B,CACAwJ,MAAAA,CAAO9Z,EAAMsQ,GACT,MAAM,MAAE0I,EAAK,MAAEC,GAAUjO,KACnBjO,EAASiD,EAAKjD,OAEpB,IADAuT,GAAkB,EACXA,EAASvT,GAAQ,CACpB,MAAMgd,EAAQ/O,KAAK2N,MAAQ,GAC3B,IAAIqB,EAAQD,EACZ,KAAOzJ,EAASvT,GAAUid,EAAQ,IAC9BhB,EAAMgB,KAAWha,EAAKsQ,KAEtB0J,GAAS,IACThP,KAAK2O,OAAOV,GAEhBjO,KAAK2N,OAASqB,EAAQD,CAC1B,CACA,OAAO/O,IACX,CACAoO,KAAAA,CAAMa,GACF,MAAM,MAAEjB,EAAK,MAAEC,GAAUjO,KACnBjO,EAASkd,EAAKld,OACpB,IAAImd,EAAYlP,KAAK4N,IACrB,IAAK,IAAItI,EAAS,EAAGA,EAASvT,GAAS,CACnC,MAAMgd,EAAQ/O,KAAK2N,MAAQ,GAC3B,IAAIqB,EAAQD,EACZ,KAAOzJ,EAASvT,GAAUid,EAAQ,IAAuB,CACrD,IAAIG,EAAmC,EAA5BF,EAAKvb,WAAW4R,KACvB6J,EAAO,IAEPnB,EAAMgB,KAAWG,EAEZA,EAAO,MAEZnB,EAAMgB,KAAW,IAAQG,IAAS,EAClCnB,EAAMgB,KAAW,IAAe,GAAPG,GAEpBA,EAAO,OAAUA,EAAO,OAE7BnB,EAAMgB,KAAW,IAAQG,IAAS,GAClCnB,EAAMgB,KAAW,IAASG,IAAS,EAAK,GACxCnB,EAAMgB,KAAW,IAAe,GAAPG,GAEpBD,GAELC,IAAqB,KAAZD,IAAsB,KAAc,KAAPC,GAAgB,MACtDnB,EAAMgB,KAAW,IAAQG,IAAS,GAClCnB,EAAMgB,KAAW,IAASG,IAAS,GAAM,GACzCnB,EAAMgB,KAAW,IAASG,IAAS,EAAK,GACxCnB,EAAMgB,KAAW,IAAe,GAAPG,EACzBD,EAAY,GAGZA,EAAYC,CAEpB,CACIH,GAAS,KACThP,KAAK2O,OAAOV,GACZA,EAAM,GAAKA,EAAM,KAErBjO,KAAK2N,OAASqB,EAAQD,CAC1B,CAEA,OADA/O,KAAK4N,IAAMsB,EACJlP,IACX,CACA2O,MAAAA,CAAO3Z,EAAMsQ,GACT,IAAI,EAAEgI,EAAC,EAAEC,EAAC,EAAE7C,EAAC,EAAE8C,EAAC,EAAE9Q,EAAC,EAAE+Q,EAAC,EAAE7J,EAAC,EAAE8J,GAAM1N,KAC7B/N,EAAI,EAER,IADAqT,GAAkB,EACXrT,EAAI,IACP2S,GAAE3S,KAAOmd,GAAOpa,EAAKsQ,MAEzB,IAAKrT,EAAI,GAAuBA,EAAI,GAAsBA,IACtD2S,GAAE3S,GAAMod,GAAOzK,GAAE3S,EAAI,IAAM2S,GAAE3S,EAAI,GAAKqd,GAAO1K,GAAE3S,EAAI,KAAO2S,GAAE3S,EAAI,IAAO,EAE3E,IAAKA,EAAI,EAAGA,EAAI,GAAsBA,IAAK,CACvC,MAAMsd,EAAM7B,EAAI8B,GAAO9S,GAAK+S,GAAG/S,EAAG+Q,EAAG7J,GAAKuJ,GAAElb,GAAK2S,GAAE3S,GAAM,EACnDyd,EAAMC,GAAOrC,GAAKsC,GAAItC,EAAGC,EAAG7C,GAAM,EACxCgD,EAAI9J,EACJA,EAAI6J,EACJA,EAAI/Q,EACJA,EAAK8Q,EAAI+B,EAAM,EACf/B,EAAI9C,EACJA,EAAI6C,EACJA,EAAID,EACJA,EAAKiC,EAAKG,EAAM,CACpB,CACA1P,KAAKsN,EAAKA,EAAItN,KAAKsN,EAAK,EACxBtN,KAAKuN,EAAKA,EAAIvN,KAAKuN,EAAK,EACxBvN,KAAK0K,EAAKA,EAAI1K,KAAK0K,EAAK,EACxB1K,KAAKwN,EAAKA,EAAIxN,KAAKwN,EAAK,EACxBxN,KAAKtD,EAAKA,EAAIsD,KAAKtD,EAAK,EACxBsD,KAAKyN,EAAKA,EAAIzN,KAAKyN,EAAK,EACxBzN,KAAK4D,EAAKA,EAAI5D,KAAK4D,EAAK,EACxB5D,KAAK0N,EAAKA,EAAI1N,KAAK0N,EAAK,CAC5B,CACAmC,MAAAA,CAAOC,GACH,MAAM,MAAE9B,EAAK,MAAEC,GAAUjO,KACzB,IAAI/N,EAAK+N,KAAK2N,MAAQ,GAAyB,EAG/C,IAFAK,EAAM/b,KAAO,IAEF,EAAJA,GACH+b,EAAM/b,KAAO,EAGjB,GADAA,IAAM,EACFA,EAAI,GAAsB,CAC1B,KAAOA,EAAI,IACPgc,EAAMhc,KAAO,EAEjBA,EAAI,EACJ+N,KAAK2O,OAAOV,EAChB,CAEA,KAAOhc,EAAI,IACPgc,EAAMhc,KAAO,EAGjB,MAAM8d,EAAsB,EAAb/P,KAAK2N,MACdqC,GAAkB,WAATD,KAAyB,EAClCE,GAAUF,EAASC,GAAS,WAMlC,OALIC,IACAhC,EAAM,IAAwBmB,GAAOa,IACrCD,IACA/B,EAAM,IAAuBmB,GAAOY,IACxChQ,KAAK2O,OAAOV,GACS,QAAb6B,EAAsB9P,KAAKkQ,OAASlQ,KAAKmQ,MACrD,CACAD,IAAAA,GACI,MAAM,EAAE5C,EAAC,EAAEC,EAAC,EAAE7C,EAAC,EAAE8C,EAAC,EAAE9Q,EAAC,EAAE+Q,EAAC,EAAE7J,EAAC,EAAE8J,GAAM1N,KACnC,OAAOoQ,GAAM9C,GAAK8C,GAAM7C,GAAK6C,GAAM1F,GAAK0F,GAAM5C,GAAK4C,GAAM1T,GAAK0T,GAAM3C,GAAK2C,GAAMxM,GAAKwM,GAAM1C,EAC9F,CACAyC,IAAAA,GACI,MAAM,EAAE7C,EAAC,EAAEC,EAAC,EAAE7C,EAAC,EAAE8C,EAAC,EAAE9Q,EAAC,EAAE+Q,EAAC,EAAE7J,EAAC,EAAE8J,EAAC,MAAEM,EAAK,MAAEC,GAAUjO,KASjD,OARAiO,EAAM,GAAKmB,GAAO9B,GAClBW,EAAM,GAAKmB,GAAO7B,GAClBU,EAAM,GAAKmB,GAAO1E,GAClBuD,EAAM,GAAKmB,GAAO5B,GAClBS,EAAM,GAAKmB,GAAO1S,GAClBuR,EAAM,GAAKmB,GAAO3B,GAClBQ,EAAM,GAAKmB,GAAOxL,GAClBqK,EAAM,GAAKmB,GAAO1B,GACXM,EAAM5X,MAAM,EAAG,GAC1B,EAEJ,MAAMwO,GAAI,IAAIsJ,WAAW,IACzB,IAAIL,GACAC,GAAe,EACnB,MAAMsC,GAAQzX,IAAQA,EAAM,YAAazG,SAAS,IAAIme,QAAQ,GAGxDjB,GASiB,MADP,IAAI3d,WAAW,IAAI6e,YAAY,CAAC,QAAS5B,QACzC,GAVAlK,GAAKA,EADLA,GAAQA,GAAK,GAAM,WAAgBA,GAAK,EAAK,SAAcA,GAAK,EAAK,MAAYA,GAAK,GAAM,IAGtGiL,GAAKA,CAACzW,EAAGC,EAAG6K,IAAOA,EAAK9K,GAAKC,EAAI6K,GACjC8L,GAAMA,CAAC5W,EAAGC,EAAG6K,IAAQ9K,EAAIC,EAAM6K,GAAK9K,EAAIC,GACxC0W,GAAS3W,IAAOA,IAAM,EAAIA,GAAK,KAAOA,IAAM,GAAKA,GAAK,KAAOA,IAAM,GAAKA,GAAK,IAC7EwW,GAASxW,IAAOA,IAAM,EAAIA,GAAK,KAAOA,IAAM,GAAKA,GAAK,KAAOA,IAAM,GAAKA,GAAK,GAC7EsW,GAAStW,IAAOA,IAAM,EAAIA,GAAK,KAAOA,IAAM,GAAKA,GAAK,IAAOA,IAAM,EACnEqW,GAASrW,IAAOA,IAAM,GAAKA,GAAK,KAAOA,IAAM,GAAKA,GAAK,IAAOA,IAAM,wBC5O7DuX,GAAiB,UAK5B,MAAMzF,EAAYiC,GAAK3C,aAAaoG,EAAMhQ,YAAY,GAGhDiQ,GAAkBC,EAAAA,GAAAA,IAAsB5F,GAE9C,GAAI2F,GAAmBD,EAAM1F,UAC3B,MAAM,IAAIxY,MAAK,2CAAAG,OAC8B+d,EAAM1F,UAAS,UAAArY,OAASge,IAIvE,MAAMnZ,EDKD,SAAoBqZ,GACvB,GAAIA,IAAcvD,GAAWuD,KAAevD,GAAWuD,EAAUC,eAC7D,MAAM,IAAIte,MAAM,+BAEpB,OAAO,IAAI+a,EACf,CCVewD,GAAa1C,OAAOqC,EAAMM,SAASjB,SAEhD,OADkB9C,GAAKvC,KAAKlT,EAAMkZ,EAAMhQ,YACvB+H,UAAU,kBCnBvB,SAAUwI,EAAwBP,GAEtC,MAAMQ,EAiBR,SAAchU,GACZ,GAAyB,IAArBrI,UAAU5C,OACZ,MAAM,IAAIsc,UAAU,4CAGtB,IAAIpc,EAMJ,IAJA+K,EAAC,GAAAvK,OAAMuK,GAIF/K,EAAI,EAAGA,EAAI+K,EAAEjL,OAAQE,IACxB,GAAI+K,EAAEtJ,WAAWzB,GAAK,IACpB,MAAM,IAAIK,MAAK,4DAAAG,OAC+CuK,EAAEtJ,WAC5DzB,GACD,iBAAAQ,OAAgBR,IAKvB,IAAIiE,EAAM,GACV,IAAKjE,EAAI,EAAGA,EAAI+K,EAAEjL,OAAQE,GAAK,EAAG,CAChC,MAAMgf,EAAsC,MAC1Crd,OACAA,OACAA,OACAA,GAEFqd,EAAY,GAAKjU,EAAEtJ,WAAWzB,IAAM,EACpCgf,EAAY,IAAwB,EAAlBjU,EAAEtJ,WAAWzB,KAAc,EACzC+K,EAAEjL,OAASE,EAAI,IACjBgf,EAAY,IAAMjU,EAAEtJ,WAAWzB,EAAI,IAAM,EACzCgf,EAAY,IAA4B,GAAtBjU,EAAEtJ,WAAWzB,EAAI,KAAc,GAE/C+K,EAAEjL,OAASE,EAAI,IACjBgf,EAAY,IAAOjU,EAAEtJ,WAAWzB,EAAI,IAAM,EAC1Cgf,EAAY,GAA2B,GAAtBjU,EAAEtJ,WAAWzB,EAAI,IAEpC,IAAK,IAAIif,EAAI,EAAGA,EAAID,EAAYlf,OAAQmf,IACR,qBAAnBD,EAAYC,GACrBhb,GAAO,IAEPA,GAAOib,EAAWF,EAAYC,GAGnC,CACD,OAAOhb,CACT,CAjEuBkb,CAAKZ,GAC1B,OAGI,SAA+CA,GACnD,OAAOA,EAAMa,QAAQ,MAAO,KAAKA,QAAQ,MAAO,KAAKA,QAAQ,KAAM,GACrE,CALSC,CAAqCN,EAC9C,CAMM,SAAUN,EAAsBF,GACpC,OAAOA,EAAM/U,QACX,CAAChD,EAAQO,IAAMP,EAASO,EAAE9G,SAAS,IAAIC,SAAS,EAAG,MACnD,GAEJ,CAsDA,SAASgf,EAAWnC,GAQlB,GAAIA,GAAS,GAAKA,EAAQ,GACxB,MAHA,mEAGcA,EAKlB","sources":["../node_modules/.pnpm/@noble+curves@1.3.0/node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/.pnpm/@noble+curves@1.3.0/node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/.pnpm/@noble+curves@1.3.0/node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/.pnpm/@noble+curves@1.3.0/node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/.pnpm/@noble+curves@1.3.0/node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/.pnpm/@noble+curves@1.3.0/node_modules/@noble/curves/src/p256.ts","../node_modules/.pnpm/sha256-uint8array@0.10.7/node_modules/sha256-uint8array/dist/sha256-uint8array.mjs","../../src/purejs.ts","../../src/index.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!isBytes(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!isBytes(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    if (!isBytes(a)) throw new Error('Uint8Array expected');\n    sum += a.length;\n  }\n  let res = new Uint8Array(sum);\n  let pad = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n: bigint, pos: number, value: boolean) => {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!ut.isBytes(data)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || ut.isBytes(sg)) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { createCurve } from './_shortw_utils.js';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { Field } from './abstract/modular.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport { createHasher } from './abstract/hash-to-curve.js';\n\n// NIST secp256r1 aka p256\n// https://www.secg.org/sec2-v2.pdf, https://neuromancer.sk/std/nist/P-256\n\nconst Fp = Field(BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'));\nconst CURVE_A = Fp.create(BigInt('-3'));\nconst CURVE_B = BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b');\n\n// prettier-ignore\nexport const p256 = createCurve({\n  a: CURVE_A, // Equation params: a, b\n  b: CURVE_B,\n  Fp, // Field: 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n-1n\n  // Curve order, total count of valid points in the field\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n  // Base (generator) point (x, y)\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n  h: BigInt(1),\n  lowS: false,\n} as const, sha256);\nexport const secp256r1 = p256;\n\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: CURVE_A,\n    B: CURVE_B,\n    Z: Fp.create(BigInt('-10')),\n  }))();\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(secp256r1.ProjectivePoint, (scalars: bigint[]) => mapSWU(scalars[0]), {\n    DST: 'P256_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n  }))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","/**\n * sha256-uint8array.ts\n */\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311\nconst K = [\n    0x428a2f98 | 0, 0x71374491 | 0, 0xb5c0fbcf | 0, 0xe9b5dba5 | 0,\n    0x3956c25b | 0, 0x59f111f1 | 0, 0x923f82a4 | 0, 0xab1c5ed5 | 0,\n    0xd807aa98 | 0, 0x12835b01 | 0, 0x243185be | 0, 0x550c7dc3 | 0,\n    0x72be5d74 | 0, 0x80deb1fe | 0, 0x9bdc06a7 | 0, 0xc19bf174 | 0,\n    0xe49b69c1 | 0, 0xefbe4786 | 0, 0x0fc19dc6 | 0, 0x240ca1cc | 0,\n    0x2de92c6f | 0, 0x4a7484aa | 0, 0x5cb0a9dc | 0, 0x76f988da | 0,\n    0x983e5152 | 0, 0xa831c66d | 0, 0xb00327c8 | 0, 0xbf597fc7 | 0,\n    0xc6e00bf3 | 0, 0xd5a79147 | 0, 0x06ca6351 | 0, 0x14292967 | 0,\n    0x27b70a85 | 0, 0x2e1b2138 | 0, 0x4d2c6dfc | 0, 0x53380d13 | 0,\n    0x650a7354 | 0, 0x766a0abb | 0, 0x81c2c92e | 0, 0x92722c85 | 0,\n    0xa2bfe8a1 | 0, 0xa81a664b | 0, 0xc24b8b70 | 0, 0xc76c51a3 | 0,\n    0xd192e819 | 0, 0xd6990624 | 0, 0xf40e3585 | 0, 0x106aa070 | 0,\n    0x19a4c116 | 0, 0x1e376c08 | 0, 0x2748774c | 0, 0x34b0bcb5 | 0,\n    0x391c0cb3 | 0, 0x4ed8aa4a | 0, 0x5b9cca4f | 0, 0x682e6ff3 | 0,\n    0x748f82ee | 0, 0x78a5636f | 0, 0x84c87814 | 0, 0x8cc70208 | 0,\n    0x90befffa | 0, 0xa4506ceb | 0, 0xbef9a3f7 | 0, 0xc67178f2 | 0,\n];\nconst algorithms = {\n    sha256: 1,\n};\nexport function createHash(algorithm) {\n    if (algorithm && !algorithms[algorithm] && !algorithms[algorithm.toLowerCase()]) {\n        throw new Error(\"Digest method not supported\");\n    }\n    return new Hash();\n}\nexport class Hash {\n    constructor() {\n        // first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n        this.A = 0x6a09e667 | 0;\n        this.B = 0xbb67ae85 | 0;\n        this.C = 0x3c6ef372 | 0;\n        this.D = 0xa54ff53a | 0;\n        this.E = 0x510e527f | 0;\n        this.F = 0x9b05688c | 0;\n        this.G = 0x1f83d9ab | 0;\n        this.H = 0x5be0cd19 | 0;\n        this._size = 0;\n        this._sp = 0; // surrogate pair\n        if (!sharedBuffer || sharedOffset >= 8000 /* N.allocTotal */) {\n            sharedBuffer = new ArrayBuffer(8000 /* N.allocTotal */);\n            sharedOffset = 0;\n        }\n        this._byte = new Uint8Array(sharedBuffer, sharedOffset, 80 /* N.allocBytes */);\n        this._word = new Int32Array(sharedBuffer, sharedOffset, 20 /* N.allocWords */);\n        sharedOffset += 80 /* N.allocBytes */;\n    }\n    update(data) {\n        // data: string\n        if (\"string\" === typeof data) {\n            return this._utf8(data);\n        }\n        // data: undefined\n        if (data == null) {\n            throw new TypeError(\"Invalid type: \" + typeof data);\n        }\n        const byteOffset = data.byteOffset;\n        const length = data.byteLength;\n        let blocks = (length / 64 /* N.inputBytes */) | 0;\n        let offset = 0;\n        // longer than 1 block\n        if (blocks && !(byteOffset & 3) && !(this._size % 64 /* N.inputBytes */)) {\n            const block = new Int32Array(data.buffer, byteOffset, blocks * 16 /* N.inputWords */);\n            while (blocks--) {\n                this._int32(block, offset >> 2);\n                offset += 64 /* N.inputBytes */;\n            }\n            this._size += offset;\n        }\n        // data: TypedArray | DataView\n        const BYTES_PER_ELEMENT = data.BYTES_PER_ELEMENT;\n        if (BYTES_PER_ELEMENT !== 1 && data.buffer) {\n            const rest = new Uint8Array(data.buffer, byteOffset + offset, length - offset);\n            return this._uint8(rest);\n        }\n        // no more bytes\n        if (offset === length)\n            return this;\n        // data: Uint8Array | Int8Array\n        return this._uint8(data, offset);\n    }\n    _uint8(data, offset) {\n        const { _byte, _word } = this;\n        const length = data.length;\n        offset = offset | 0;\n        while (offset < length) {\n            const start = this._size % 64 /* N.inputBytes */;\n            let index = start;\n            while (offset < length && index < 64 /* N.inputBytes */) {\n                _byte[index++] = data[offset++];\n            }\n            if (index >= 64 /* N.inputBytes */) {\n                this._int32(_word);\n            }\n            this._size += index - start;\n        }\n        return this;\n    }\n    _utf8(text) {\n        const { _byte, _word } = this;\n        const length = text.length;\n        let surrogate = this._sp;\n        for (let offset = 0; offset < length;) {\n            const start = this._size % 64 /* N.inputBytes */;\n            let index = start;\n            while (offset < length && index < 64 /* N.inputBytes */) {\n                let code = text.charCodeAt(offset++) | 0;\n                if (code < 0x80) {\n                    // ASCII characters\n                    _byte[index++] = code;\n                }\n                else if (code < 0x800) {\n                    // 2 bytes\n                    _byte[index++] = 0xC0 | (code >>> 6);\n                    _byte[index++] = 0x80 | (code & 0x3F);\n                }\n                else if (code < 0xD800 || code > 0xDFFF) {\n                    // 3 bytes\n                    _byte[index++] = 0xE0 | (code >>> 12);\n                    _byte[index++] = 0x80 | ((code >>> 6) & 0x3F);\n                    _byte[index++] = 0x80 | (code & 0x3F);\n                }\n                else if (surrogate) {\n                    // 4 bytes - surrogate pair\n                    code = ((surrogate & 0x3FF) << 10) + (code & 0x3FF) + 0x10000;\n                    _byte[index++] = 0xF0 | (code >>> 18);\n                    _byte[index++] = 0x80 | ((code >>> 12) & 0x3F);\n                    _byte[index++] = 0x80 | ((code >>> 6) & 0x3F);\n                    _byte[index++] = 0x80 | (code & 0x3F);\n                    surrogate = 0;\n                }\n                else {\n                    surrogate = code;\n                }\n            }\n            if (index >= 64 /* N.inputBytes */) {\n                this._int32(_word);\n                _word[0] = _word[16 /* N.inputWords */];\n            }\n            this._size += index - start;\n        }\n        this._sp = surrogate;\n        return this;\n    }\n    _int32(data, offset) {\n        let { A, B, C, D, E, F, G, H } = this;\n        let i = 0;\n        offset = offset | 0;\n        while (i < 16 /* N.inputWords */) {\n            W[i++] = swap32(data[offset++]);\n        }\n        for (i = 16 /* N.inputWords */; i < 64 /* N.workWords */; i++) {\n            W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0;\n        }\n        for (i = 0; i < 64 /* N.workWords */; i++) {\n            const T1 = (H + sigma1(E) + ch(E, F, G) + K[i] + W[i]) | 0;\n            const T2 = (sigma0(A) + maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        this.A = (A + this.A) | 0;\n        this.B = (B + this.B) | 0;\n        this.C = (C + this.C) | 0;\n        this.D = (D + this.D) | 0;\n        this.E = (E + this.E) | 0;\n        this.F = (F + this.F) | 0;\n        this.G = (G + this.G) | 0;\n        this.H = (H + this.H) | 0;\n    }\n    digest(encoding) {\n        const { _byte, _word } = this;\n        let i = (this._size % 64 /* N.inputBytes */) | 0;\n        _byte[i++] = 0x80;\n        // pad 0 for current word\n        while (i & 3) {\n            _byte[i++] = 0;\n        }\n        i >>= 2;\n        if (i > 14 /* N.highIndex */) {\n            while (i < 16 /* N.inputWords */) {\n                _word[i++] = 0;\n            }\n            i = 0;\n            this._int32(_word);\n        }\n        // pad 0 for rest words\n        while (i < 16 /* N.inputWords */) {\n            _word[i++] = 0;\n        }\n        // input size\n        const bits64 = this._size * 8;\n        const low32 = (bits64 & 0xffffffff) >>> 0;\n        const high32 = (bits64 - low32) / 0x100000000;\n        if (high32)\n            _word[14 /* N.highIndex */] = swap32(high32);\n        if (low32)\n            _word[15 /* N.lowIndex */] = swap32(low32);\n        this._int32(_word);\n        return (encoding === \"hex\") ? this._hex() : this._bin();\n    }\n    _hex() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return hex32(A) + hex32(B) + hex32(C) + hex32(D) + hex32(E) + hex32(F) + hex32(G) + hex32(H);\n    }\n    _bin() {\n        const { A, B, C, D, E, F, G, H, _byte, _word } = this;\n        _word[0] = swap32(A);\n        _word[1] = swap32(B);\n        _word[2] = swap32(C);\n        _word[3] = swap32(D);\n        _word[4] = swap32(E);\n        _word[5] = swap32(F);\n        _word[6] = swap32(G);\n        _word[7] = swap32(H);\n        return _byte.slice(0, 32);\n    }\n}\nconst W = new Int32Array(64 /* N.workWords */);\nlet sharedBuffer;\nlet sharedOffset = 0;\nconst hex32 = num => (num + 0x100000000).toString(16).substr(-8);\nconst swapLE = (c => (((c << 24) & 0xff000000) | ((c << 8) & 0xff0000) | ((c >> 8) & 0xff00) | ((c >> 24) & 0xff)));\nconst swapBE = (c => c);\nconst swap32 = isBE() ? swapBE : swapLE;\nconst ch = (x, y, z) => (z ^ (x & (y ^ z)));\nconst maj = (x, y, z) => ((x & y) | (z & (x | y)));\nconst sigma0 = x => ((x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10));\nconst sigma1 = x => ((x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7));\nconst gamma0 = x => ((x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3));\nconst gamma1 = x => ((x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10));\nfunction isBE() {\n    const buf = new Uint8Array(new Uint16Array([0xFEFF]).buffer); // BOM\n    return (buf[0] === 0xFE);\n}\n"],"names":["BigInt","_1n","_2n","isBytes","a","Uint8Array","constructor","name","hexes","Array","from","length","_","i","toString","padStart","bytesToHex","bytes","Error","hex","hexToNumber","concat","asciis","_0","_9","_A","_F","_a","_f","asciiToBase16","char","hexToBytes","hl","al","array","ai","hi","n1","charCodeAt","n2","undefined","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","n","len","numberToBytesLE","ensureBytes","title","expectedLength","res","e","concatBytes","sum","arguments","pad","set","bitMask","u8n","data","u8fr","arr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","fill","h","_len","b","_key","reseed","seed","gen","out","sl","slice","push","genUntil","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isSafeInteger","Number","isArray","field","object","Fp","isValid","hash","outputLen","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","Object","entries","_0n","_3n","_4n","_5n","_8n","mod","result","pow","num","power","modulo","invert","number","x","y","u","q","r","m","FpSqrt","P","p1div4","root","eql","sqr","c1","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","Math","ceil","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","validateBasic","curve","reduce","map","ORDER","MASK","BYTES","BITS","Gx","Gy","freeze","p","b2n","h2b","ut","DER","Err","super","_parseInt","E","subarray","d","l","toSig","sBytes","s","rBytesLeft","hexFromSig","sig","parseInt","shl","rhl","rl","weierstrassPoints","opts","CURVE","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","toBytes","endo","beta","splitScalar","validatePointOpts","_c","point","_isCompressed","toAffine","tail","weierstrassEquation","x2","x3","add","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","key","lengths","includes","error","pointPrecomputes","Map","assertPrjPoint","other","Point","px","py","pz","fromAffine","is0","this","normalizeZ","points","toInv","invertBatch","fromHex","assertValidity","fromPrivateKey","privateKey","BASE","multiply","_setWindowSize","windowSize","_WINDOW_SIZE","delete","left","right","hasEvenY","isOdd","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","double","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wNAF","wnaf","wNAFCached","comp","multiplyUnsafe","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","G","iz","z","inv","ax","ay","zz","cofactor","toRawBytes","isCompressed","toHex","_bits","c","bits","condition","item","W","windows","elm","precomputeWindow","base","window","precomputes","mask","maxNumber","shiftBy","offset","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","get","ProjectivePoint","weierstrass","curveDef","hmac","randomBytes","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","head","y2","sqrt","numToNByteStr","isBiggerThanHalfOrder","slcNum","to","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","isLE","fieldLen","minLen","reduced","precompute","isProbPub","str","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","prehash","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","C","drbg","verify","signature","publicKey","_Point$BASE$multiplyA","sg","_sig","derError","message","is","getHash","msgs","bitLen","redef","sqrtP","create","lhs","rhs","FpPow","div","sqrN","addN","subN","mulN","lst","nums","tmp","lastMultiplied","acc","inverted","reduceRight","FpInvertBatch","cmov","Field","CURVE_A","CURVE_B","p256","defHash","createCurve","sha256","K","algorithms","Hash","A","B","D","F","H","_size","_sp","sharedBuffer","sharedOffset","ArrayBuffer","_byte","_word","Int32Array","update","_utf8","TypeError","byteOffset","byteLength","blocks","block","buffer","_int32","BYTES_PER_ELEMENT","rest","_uint8","start","index","text","surrogate","code","swap32","gamma1","gamma0","T1","sigma1","ch","T2","sigma0","maj","digest","encoding","bits64","low32","high32","_hex","_bin","hex32","substr","Uint16Array","signWithApiKey","input","publicKeyString","uint8ArrayToHexString","algorithm","toLowerCase","createHash","content","stringToBase64urlString","base64String","groupsOfSix","j","btoaLookup","btoa","replace","base64StringToBase64UrlEncodedString"],"sourceRoot":""}